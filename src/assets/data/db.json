{
  "blog" : {
    "-KW-TGzzsslUqKutvC3r" : {
      "date_created" : "2017-02-09 01:01:08",
      "date_published" : "2017-03-03T03:00:00.000Z",
      "github" : "https://github.com/daniru/blog/tree/step_1",
      "header" : "Create your angular blog (1)",
      "key" : "create_angular_blog_1",
      "sections" : [ {
        "order" : 1,
        "text" : "This article is part of a series that takes you through the steps of creating your own blog using Angular and TypeScript. They will cover the core fundamentals of angular at the same time that we are building our data-driven application. We will be displaying the list of blog post and a post itself, we will be able to edit them using Reactive Forms, store them in a database (firebase) and navigate among those components. We will be hosting the blog in Github Pages.\n\nThis is the first part, where are going to set up the application. We will install and use @angular/cli as a main tool to create the application. We will run the application locally and create a github repository to push the application to a remote branch. Finally, we will build and deploy it to GitHubPages.\n"
      }, {
        "order" : 2,
        "text" : "Although previous knowledge of angular is not needed to follow those articles, it is highly recommended to have a look at [Tour of Heroes](https://angular.io/docs/ts/latest/tutorial/) before start, to be familiar with the core fundamentals of angular. {.alert .alert-secondary} "
      }, {
        "files" : [ {
          "content" : "npm install -g @angular/cli\n",
          "order" : 1
        } ],
        "order" : 3,
        "text" : "## Tooling \n\nDuring the course of that tutorial, we will be using [Angular CLI](https://cli.angular.io/)  to create, build and serve locally the site. If you have not got it installed,  you can do so using NPM:\n"
      }, {
        "files" : [ {
          "content" : "ng new blog --style=scss --routing --prefix=dr\n",
          "order" : 1
        } ],
        "order" : 4,
        "text" : "## Creating Your Angular Application\n\nNow, that we have angularCLI installed,  creating a new angular application is easy. We just type the following line in the console and our application will be created with the basic structure and download all the dependencies that it needs. "
      }, {
        "order" : 5,
        "text" : "We have added a few flags:\n\n- **--style=scss**: defaults the project to use SCSS.\n- **--routing**: adds the basic routing module in the project \n- **--prefix=dr**: sets our prefix for the components.\n"
      }, {
        "files" : [ {
          "content" : "ng serve",
          "order" : 1
        } ],
        "order" : 6,
        "text" : "Having a look what it has created. I have listed the most relevant files.\n\n| Path | File/**Folder** | Desc |\n|---|---|---|\n| / | .angular-cli.json | Angular cli config file |\n| / | karma.conf.js | Karma config file |\n| / | package.json | NPM config file |  \n| / | protactor.conf.js | e2e config file |\n| / | tsconfig.json | Typescript config file |\n| / | tslint.json | Lint config file  |\n| / | **e2e** | End-to-end test folder |\n| / | **node_modules** | Packages library folder |\n| / | **src**  | Folder where we will find the app source code. |\n| /src/ | index.html | Entry point of the website where we declare the entry component **<dr-root>** |\n| /src/ | main.ts | Entry point of the angular app, where we bootstrap the application.  |\n| /src/ | pollyfills.ts | Polyfills needed by angular.  |\n| /src/ | styles.scss | Main styles of the app. |\n| /src/ | tsconfig.app.json | tsconfig for our the app. |\n| /src/ | typings.d.ts | Extra typings. |\n| /src/ | **assets** | Folder where we will add our assets, that folder will be copied to our prod folder. |\n| /src/ | **environments** | Folder where we will store the configurations for each environments. |\n| /src/ | **app** | Forder where our app lives. |\n| /src/app/ | app-routing.module.ts |  Main routing of our app. |\n| /src/app/ | app.module.ts | Main module of the app. We import the and bootstrap here the app component. |\n| /src/app/ | app.components.ts | Main component of the app. |\n| /src/app/ | app.components.html | Template for the app.component |\n| /src/app/ | app.components.scss | Styles for the app.component |\n| /src/app/ | app.components.spec.ts | Unit test for the app component. |\n\n\nNow, that we have looked inside the App, let's boot up it  to see if it really works, just type:"
      }, {
        "order" : 7,
        "text" : "This command will keep the app transpiling and running, watching for any changes in our source code while we continue to build the blog.\n\nNow, we navigate to [http://localhost:4200](http://localhost:4200). \n\ndr works! {.alert .alert-success}\n\n\n"
      }, {
        "files" : [ {
          "content" : "git init\ngit commit -a  -m \"first commit\"\ngit remote add origin ''yourlinkrepository''\ngit push -u origin master",
          "order" : 1
        } ],
        "order" : 8,
        "text" : "## Adding to Github repository\n\nNow that we have the app working locally, let's push it to a public repository.\n\nWe need to create our own public repository in [Github](https://github.com/new) and follow the instructions that should be similar to those:"
      }, {
        "files" : [ {
          "content" : "npm i angular-cli-ghpages --save-dev",
          "order" : 1
        } ],
        "order" : 9,
        "text" : "## Github pages\n\nGithub allows you to host your projects directly from your repositories. It looks for the compiled code of the website in the *gh-pages* branch by default. \n\nThere is a special case when the repository is called username.github.io (main page), then Github gets the code from master. More information [here](https://help.github.com/categories/github-pages-basics/) {.alert}\n\nTo be able to display our website, we need to deploy the built code in that *gh-branch* in our repository. We will install **angular-cli-ghpages** to help us with the deployment.\n"
      }, {
        "files" : [ {
          "content" : "  \"scripts\": {\n    ....\n    \"ghp\": \"ng build --prod --bh /blog/ && copy dist\\\\index.html dist\\\\404.html && ngh\"\n  },",
          "name" : "package.json",
          "order" : 1
        } ],
        "order" : 10,
        "text" : "We need to do three steps to be able to deploy our app:\n| Action | Command | Description |\n|---|---|---|\n| Build  | ng build --prod --bh /reponame/ | Build our app in prod mode. We need to specify where to find the files in base href, as they will be in our repository folders instead of the root. |\n| Copy |  copy dist\\\\index.html dist\\\\404.html | SPA are not supported by default, github will try to find our angular router unsuccessfully and redirect us to 404.html. Copying our index.html to 404.html will fix the problem.  |\n| Deploy | ngh | Deploy our build code to GitGub pages branch |\n\nTo make it easier, we will add a new script in package.json to do it for us anytime."
      }, {
        "order" : 11,
        "text" : "Now, we can execute any time\n\n```\nnpm run ghp\n```\n\nIn a few seconds, you should be able to see your code running in githubpages in https://yourgithubusername.github.io/yourrepository.\n"
      }, {
        "files" : [ {
          "content" : "mkdir yourgithubusername.github.io\ncd yourgithubusername.github.io",
          "order" : 1
        } ],
        "order" : 12,
        "text" : "## Display your repository in the root\n\nThis section may be not relevant to you if you have more projects or you don't want your blog as default page. {.alert .alert-danger }\n\nIdeally we want our users only type the root url **username.github.io**, instead **username.github.io/repositoryname**.\n\nusername.github.io repository reads the github page code from master. This lets us in the awkward position that we cannot have our source code and build code in master. So we need to have the code in other repository and publish to our gh-pages branch in the repository, as we have now.\n\nAn easy workaround is setup our basic main website **username.github.io** to redirect to our repository.\n\nLet's create a new folder with only one file."
      }, {
        "files" : [ {
          "content" : "<html>\n  <head>\n    <meta http-equiv=\"refresh\" content=\"0; URL='https://daniru.github.io/blog'\" />\n  </head>\n  <body>\n\n  </body>\n</html>",
          "name" : "index.html",
          "order" : 1
        } ],
        "order" : 13,
        "text" : "Let's create a file index.html"
      }, {
        "order" : 14,
        "text" : "Now we need to create the homepage repository, which is the same as above - go to the [link](https://github.com/new) and follow the instructions with the repository **yourgithubusername.github.io**.\n\nIn a few seconds, you should be able to navigate to https://yourgithubusername.github.io and see your app working.\n\n\nGithub provides you with the option to add a custom domain instead of username.github.io.\nYou can follow the instructions [here](https://help.github.com/articles/using-a-custom-domain-with-github-pages/) {.alert .alert-info} \n\n## Conclusion\n\nNow, we have our angular application published in our main domain in Github pages.\n\nYou can check the code at that point in [github](https://github.com/daniru/blog/tree/step_1). {.alert .alert-success}\n\nIn the next post, we will create the basic structure of the blog. We will define the basic components and set up the routing."
      } ],
      "title" : "Set up and tooling"
    },
    "-KW-U1bptyI7YgUnfd1B" : {
      "date_created" : "2017-02-08 01:01:07",
      "date_published" : "2017-03-03T03:00:00.000Z",
      "github" : "https://github.com/daniru/blog/tree/step_2",
      "header" : "Create your angular blog (2)",
      "key" : "create_angular_blog_2",
      "sections" : [ {
        "order" : 1,
        "text" : "This article is part of a series that takes you through the steps of creating your own blog using Angular and TypeScript. They will cover the core fundamentals of angular at the same time that we are building our data-driven application. We will be displaying the list of blog post and a post itself, we will be able to edit them using Reactive Forms, store them in a database (firebase) and navigate among those components. We will be hosting the blog in Github Pages.\n\nThis is the second part, where we are going to create the structure of the blog, the list and the item views and how to navigate between them. We will be using the basic angular components, such as services, interfaces, components, modules and routing and how they fit together. \n"
      }, {
        "order" : 2,
        "text" : "If you get lost at any moment, you can see the source code of the blog [here](https://github.com/daniru/blog/tree/step_2). {.alert .alert-success}\n"
      }, {
        "files" : [ {
          "content" : "ng g module blog --routing\n",
          "order" : 1
        } ],
        "order" : 3,
        "text" : "\n## Blog module\n\nWe start creating a module where we will be adding all the components, services, directives and logic related with our blog.\n\nType this in the console to create out **blog** module:"
      }, {
        "order" : 4,
        "text" : "**--routing** flag adds route functionality to the module. {.alert .alert-info}\n\nBefore we continue with the component implementation, we are going to handle the data first."
      }, {
        "files" : [ {
          "content" : "ng g service blog/services/blog.service\nng g interface blog/models/blog",
          "order" : 1
        } ],
        "order" : 5,
        "text" : "## Provide Data Through a Service\n\nWe want to manage all the data from a unique place, centralizing all the logic in a single and reusable service. We create the **BlogService** for that purpose. \n\nThanks to Typescript, we can take advantage of the types. It will make us to code faster and with fewer errors thanks to the static verification of the code from the IDE. We will create an interface called **Blog**, that will contain all the properties that we will need. \n\nLet's create them."
      }, {
        "files" : [ {
          "content" : "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Blog } from '../models/blog';\nimport 'rxjs/Rx';\n\n@Injectable()\nexport class BlogService {\n\n  // we keep the blogs in memory\n  private _blogs: Blog[];\n\n  // We populate the mock data in the constructor\n  constructor() {\n    this._blogs = [\n      { key: 'blog_1', title: 'Blog 1' },\n      { key: 'blog_2', title: 'Blog 2' }\n    ];\n  }\n\n  // method to get all blogs\n  getBlogs(): Observable<Blog[]> {\n    return Observable.of(this._blogs);\n  }\n\n  // method to get on blog by key\n  getBlog(key: string): Observable<Blog> {\n    return Observable.of(this._blogs.find(x => x.key === key));\n  }\n}",
          "name" : "blog.service.ts",
          "order" : 1,
          "path" : "app/home/services/"
        }, {
          "content" : "export interface Blog {\n    key: string;\n    title: string;\n}",
          "name" : "blog.ts",
          "order" : 2,
          "path" : "app/home/models/"
        } ],
        "order" : 6,
        "text" : "Angular provides us with the **@Injectable()** decorator, that will help Angular to find the class to inject that service in any place in our application. \n\nWe create an array of blogs in the constructor. *(we will fetch the data from external sources, but let's start with something simple)*. We add two methods to fetch data, one to get all the blogs and another to get a blog by key."
      }, {
        "files" : [ {
          "content" : "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BlogRoutingModule } from './blog-routing.module';\nimport { BlogService } from './services/blog.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    BlogRoutingModule\n  ],\n  providers: [BlogService],\n  declarations: []\n})\nexport class BlogModule { }\n",
          "name" : "blog.module.ts",
          "order" : 1,
          "path" : "app/blog/"
        } ],
        "order" : 7,
        "text" : "Notice in the code above that we are not returning static objects, instead we will be returning observables to handle future asynchronous calls.\n\nYou can read more about observables [here](http://reactivex.io/intro.html). {.alert .alert-info}\n\nWe're ready to use the service. To teach the dependency injector how to find and create the service, we need to register it as a provider. We will do that by importing the service and adding it as a provider in the module declaration.\n\n> Note that injects the service in a module makes it available, as a singleton, to any component in the module or modules that import it. You can avoid that adding the provider to the component *blog.component* instead of the *blog.module*, so it will be a local instance for that component and its sub-component tree.\n>\n>          @Component(\n>          ....\n>            providers: [ ourService ]\n>          }     "
      }, {
        "files" : [ {
          "content" : "ng g component blog/components/list",
          "order" : 1
        } ],
        "order" : 8,
        "text" : "## List Component\n\nWe need a component to display our list of blogs. Let's start creating it."
      }, {
        "files" : [ {
          "content" : "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { BlogService } from '../../services/blog.service';\nimport { Blog } from '../../models/blog';\n\n@Component({\n  selector: 'dr-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss']\n})\nexport class ListComponent implements OnInit, OnDestroy {\n\n  // list of blogs in the view\n  public list: Blog[];\n  private _blogSubscription: Subscription;\n\n  // injecting blogService in the components\n  constructor(public blogService: BlogService) { }\n\n  // populating the initial data in the inizialiazation of the component\n  ngOnInit() {\n     this._blogSubscription = this.blogService.getBlogs().subscribe(items => { this.list = items; });\n  }\n\n  ngOnDestroy() {\n    if (this._blogSubscription) { this._blogSubscription.unsubscribe(); }\n  }\n}\n",
          "name" : "list.component.ts",
          "order" : 1,
          "path" : "app/blog/components/list/"
        } ],
        "order" : 9,
        "text" : "Each time that we create a component via angularCLI, it will create 4 files (the **.ts** file, where the logic lives, **.html** the external template, **.scss** the external styles and the **spec.ts** unit test files) automatically for us, link them and include in the parent module as a declaration. {.alert .alert-success}\n\n\n\nThe component will fetch the data from our brand new service. To be able to use it, we need to add our service in the constructor specifying the Type **BlogService**, and Angular, thanks to its dependency injection, will automatically assign the instance of service in our variable. Awesome!!! \n\n> Adding **private**, or **public** in the constructor parameter makes the scope of the variable global for the class. So we can use it in any part of the class using *this*.\n>\n>       constructor(public dummy: string) {}\n>\n> is the same than\n>\n>     public dummy: string;\n>     constructor(dummy: string) {\n>          this.dummy = dummy;\n>     }\n\nLet's have a look to the code of the component."
      }, {
        "files" : [ {
          "content" : "<div *ngFor=\"let item of list\">\n  <dr-list-item [blog]=\"item\"></dr-list-item>\n</div>",
          "name" : "list.component.html",
          "order" : 1,
          "path" : "app/blog/components/list/"
        } ],
        "order" : 10,
        "text" : "When the component initialises, we use the blog service to get the data. We call the method *getBlogs* and subscribe to the observable that it returns, and each time that we receive a response from the service we will populate our list of blogs.\n\nIn the ngOnDestroy function, we will unsubscribe from the observable, so we won't duplicate calls if we subscribe again when we navigate away and come back to the component.\n\nNotice that our class is implementing the OnInit and OnDestroy interfaces. This forces us to implement the ngOnInit and ngOnDestroy functions that they will be called automatically once when the component is created and destroyed. Learn more about the different LifeCycle hooks [here](https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html). {.alert .alert-info}\n\nWe want to display the data in the template, where we have access to any public property and function from the component. Angular provides a built-in directive **ngFor** to perform iterations. In our example, we will render a new *dr-list-item* component for each item in the list and bind the item to the blog property.\n\nThe syntax to bind properties in angular is **[nameProperty]=\"objectWithValue\"**. {.alert .alert-info}\n\n"
      }, {
        "files" : [ {
          "content" : "ng g component blog/components/listItem",
          "order" : 1
        } ],
        "order" : 11,
        "text" : "## List Item Component\n\nWe need to create a new component to display the list-item information.\n"
      }, {
        "files" : [ {
          "content" : "import { Component, Input } from '@angular/core';\nimport { Blog } from '../../models/blog';\n\n@Component({\n  selector: 'dr-list-item',\n  templateUrl: './list-item.component.html',\n  styleUrls: ['./list-item.component.scss']\n})\nexport class ListItemComponent{\n\n  @Input() blog: Blog;\n\n}\n",
          "name" : "list-item.component.ts",
          "order" : 1,
          "path" : "app/blog/components/list-item/"
        }, {
          "content" : "{{blog.title}}",
          "name" : "list-item.component.html",
          "order" : 2,
          "path" : "app/blog/components/list-item/"
        } ],
        "order" : 12,
        "text" : "We begin by importing the Input decoration. As we saw in the previous section, we have a property bound to our component. Inside the class, we declare *blog* property of type Blog, annotating it with the **@Input** decorator. This indicates angular to populate the value with the data in the attribute with the same name.\n\n> It is recommended to match the property and attribute names, but if it is not possible we can indicate the name as a parameter.\n>\n>      <dr-list-item [data]=\"item\"></dr-list-item>\n>      ...\n>      @input('data') blog; \n\nWe will just show the title of the blog in the template."
      }, {
        "files" : [ {
          "content" : "<h1>\n  {{title}}\n</h1>\n<router-outlet></router-outlet>\n",
          "name" : "app.component.html",
          "order" : 1,
          "path" : "app/"
        }, {
          "content" : "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n  providers: []\n})\nexport class AppRoutingModule { }\n",
          "name" : "app-routing.module.ts",
          "order" : 2,
          "path" : "app/"
        }, {
          "content" : "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ListComponent } from './components/list/list.component';\n\nconst routes: Routes = [\n  { path: '', component: ListComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: []\n})\nexport class BlogRoutingModule { }\n",
          "name" : "blog-routing.module.ts",
          "order" : 3,
          "path" : "app/blog/"
        }, {
          "content" : "import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\n\nimport { BlogModule } from './blog/blog.module';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    AppRoutingModule,\n    BlogModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
          "name" : "app.module.ts",
          "order" : 4,
          "path" : "app/"
        } ],
        "order" : 13,
        "text" : "## Configuring the Router\n\nIf we execute the app now, we still have our *dr works!*. We are not loading any route information in the application. We need to configure the router.  Let's check the following points\n\n- The *app.component* template has **<router-outlet></router-outlet>** component to display the current view.\n- We remove all the routes from the *app-routing.module*, so we can delegate to the navigation to each imported module.\n- We add the default route in the *blog-routing.module*, that calls our *home component*.\n- And we import the *blog.module* into our *app.module*.\n\nLet's have a look those files:\n\n"
      }, {
        "order" : 14,
        "text" : "Now, we execute again **ng serve**, and the web should be displaying the list of blogs.\n\n>     dr works! \n>     Blog 1\n>     Blog 2\n\n\nIf you get the error\n**EXCEPTION: No provider for BlogService!**\nremember to add the service as provider in the BlogModule or BlogComponent. {.alert .alert-danger}\n"
      }, {
        "files" : [ {
          "content" : "ng g component blog/components/item",
          "order" : 1
        } ],
        "order" : 15,
        "text" : "## Item Component\n\nWe have the list component working. Next step is to create a new component to display the full blog.  We will call it *item*.\n"
      }, {
        "files" : [ {
          "content" : "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Subscription } from 'rxjs/Subscription';\nimport { BlogService } from '../../services/blog.service';\nimport { Blog } from '../../models/blog';\n\n@Component({\n  selector: 'dr-item',\n  templateUrl: './item.component.html',\n  styleUrls: ['./item.component.scss']\n})\nexport class ItemComponent implements OnInit, OnDestroy {\n\n  public blog: Blog;\n  private _blogSubscription: Subscription;\n\n  constructor(public route: ActivatedRoute, public router: Router, public blogService: BlogService) { }\n\n  ngOnInit() {\n    this.route.params.forEach((params: Params) => {\n      const key = params['key'];\n      this.blogService.getBlog(key).subscribe((data: any) => {\n          if (data) {\n            this.blog = data;\n          } else if (data === undefined) {\n            this.router.navigate(['/']);\n          }\n        });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._blogSubscription) { this._blogSubscription.unsubscribe(); }\n  }\n}\n",
          "name" : "item.component.ts",
          "order" : 1,
          "path" : "app/blog/components/item/"
        }, {
          "content" : "<div>\nTitle: {{blog?.title}}\n</div>",
          "name" : "item.component.html",
          "order" : 2,
          "path" : "app/blog/components/item/"
        } ],
        "order" : 16,
        "text" : "We inject the ActivateRoute in the constructor to get the information of the current route. In our ngOnInit function, we find the **key** param from the current route and use it to subscribe to our service to get the data. If we don't find the data, we redirect to the index page using the router.\n\nIn the template, we will display the title of the blog."
      }, {
        "order" : 17,
        "text" : "Notice the ? operator in the template. It is a null check that evaluates the first operand, if that's is null, stop, otherwise, evaluates the second operand. This is every useful to avoid \"Cannot read property 'text' of undefined\" exception in case that the template is loaded before the data. {.alert .alert-info}"
      }, {
        "files" : [ {
          "content" : "<a [routerLink]=\"blog.key\">{{blog.title}}</a>",
          "name" : "list-item.component.html",
          "order" : 1,
          "path" : "app/home/components/list-item/"
        }, {
          "content" : "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ListComponent } from './components/list/list.component';\nimport { ItemComponent } from './components/item/item.component';\n\nconst routes: Routes = [\n  { path: '', component: ListComponent },\n  { path: ':key', component: ItemComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: []\n})\nexport class BlogRoutingModule { }\n",
          "name" : "blog-routing.module.ts",
          "order" : 2,
          "path" : "app/blog/"
        } ],
        "order" : 18,
        "text" : "## Link all together\n\nNow that we have all the components in place, let's link them together.\nWe are going to add a new route to that blog item in the **blog-routing.module**, and update the list-item template to add links instead of the title.\n\nAngular Router provides with the directive **routerLink** that gives controls to the router to assign the URL given the routing path, in our case the key of the blog.\n\nNote that the param name **key** in the route is the same in both places, when we search the param in the active route and when we declare the route. {.alert .alert-info}"
      }, {
        "files" : [ {
          "content" : "ng g module shared\nng g component shared\\components\\header --export",
          "order" : 1
        } ],
        "order" : 19,
        "text" : "Now, we have the links working to our view pages. We need a way to return from the item view to the list view.\n\nWe create a new component inside a new module called Shared. We will add in that module any component used by app.component or common for different modules.\n\nEach component can be only declared once in our application. To share a component, we will need to declare and export that component in its module, and import that module in the ones that need it. {.alert .alert-danger}\n\nWe type:"
      }, {
        "files" : [ {
          "content" : "<a routerLink=\"/\">Home</a>",
          "name" : "header.component.html",
          "order" : 1,
          "path" : "app/shared/components/header/"
        }, {
          "content" : "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { HeaderComponent } from './header/header.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule\n  ],\n  declarations: [HeaderComponent],\n  exports: [HeaderComponent]\n})\nexport class SharedModule { }\n",
          "name" : "shared.module.ts",
          "order" : 2,
          "path" : "app/shared/components/header/"
        } ],
        "order" : 20,
        "text" : "Notice that we added the flag --export, it will automatically add the component in the exports section in our shared.module {.alert .alert-info}\n\nWe update the template with a link to the home page. \n\nAs we are using Route directive, we need to be sure that we import the RouterModule in the ShareModule. {.alert .alert-warning}\n"
      }, {
        "files" : [ {
          "content" : "<dr-header></dr-header>\n<router-outlet></router-outlet>",
          "name" : "app.component.html",
          "order" : 2,
          "path" : "app/"
        }, {
          "content" : "// ... imports\nimport { SharedModule } from './shared/shared.module';\n\n@NgModule({\n  // ... metadata\n  imports: [\n    //... modules\n    SharedModule\n  ]\n})\nexport class AppModule { }\n",
          "name" : "app.module.ts",
          "order" : 1,
          "path" : "app/"
        } ],
        "order" : 21,
        "text" : "We are ready to use the component. We need to import the ShareModule to our AppModule and use the component in the app template."
      }, {
        "files" : [ {
          "content" : "npm run ghp",
          "order" : 1
        } ],
        "order" : 22,
        "text" : "## Conclusion\n\nWe have everything working together, we can navigate between our components, and getting the data from a common place from different components.\n\nAfter that, we can publish again the code the Github pages, and we should have our code working in the cloud.\n"
      }, {
        "order" : 23,
        "text" : "In the next post, we will extend the basic blog interface to a more complex one, and we will create all the component to display the information. We will be styling the site using @angular/material."
      } ],
      "title" : "Adding basic structure and routing"
    },
    "-KW-U1bptyI7YgUnfd1C" : {
      "date_created" : "2017-02-07 01:01:06",
      "date_published" : "2017-03-04T03:00:00.000Z",
      "github" : "https://github.com/daniru/blog/tree/step_3",
      "header" : "Create your angular blog (3)",
      "key" : "create_angular_blog_3",
      "sections" : [ {
        "order" : 1,
        "text" : "This article is part of a series that takes you through the steps of creating your own blog using Angular and TypeScript. They will cover the core fundamentals of angular at the same time that we are building our data-driven application. We will be displaying the list of blog post and a post itself, we will be able to edit them using Reactive Forms, store them in a database (firebase) and navigate among those components. We will be hosting the blog in Github Pages.\n\nThis is the third part, we are going to extend the Blog interface to its final version, updating our service to read the data from a JSON file and our components to display all that information. We will use Angular Material to add some styles and working with third parties libraries to build the blog."
      }, {
        "order" : 2,
        "text" : "If you get lost, you can check the code of the section [here](https://github.com/daniru/blog/tree/step_3). {.alert}"
      }, {
        "files" : [ {
          "content" : "npm i @angular/material font-awesome markdown-it markdown-it-attrs google-code-prettify clipboard moment @angular/animations@next --save\nnpm i @types/markdown-it @types/clipboard --save-dev",
          "order" : 1
        } ],
        "order" : 3,
        "text" : "## Libraries\n\nThrough this post, we will be working with a few libraries. This is a list of them:\n\n| Package | Web | NPM | Version | Description |\n|---|---|---|---|---|\n| @angular/material | [web](https://material.angular.io/) | [link](https://www.npmjs.com/package/@angular/material) |  2.0.0-beta.2 | Responsive design and basic styles. |\n| @angular/animations | [web](https://material.angular.io/) | [link](https://www.npmjs.com/package/@angular/animations) |  4.0.0 | Angular v4 has removed animations from core. So we need to import it to use tooltips from angular/material. Is possible that next version will include it automatically.  |\n| font awesome | [web](http://fontawesome.io/) | [link](https://www.npmjs.com/package/font-awesome) | 4.7.0 | More icons |\n| google-code-pretiffy | [web](https://github.com/google/code-prettify) | [link](https://www.npmjs.com/package/google-code-prettify) | 1.0.5 | To make look nicer our file contents |\n| markdown-it | [web](https://github.com/markdown-it/markdown-it) | [link](https://www.npmjs.com/package/markdown-it) | 8.3.0 | Parse markdown  |\n| markdown-it-attrs | [web](https://github.com/arve0/markdown-it-attrs) | [link](https://www.npmjs.com/package/markdown-it-attrs) | 0.8.0 | Extension to add classes in markdown |\n| clipboard | [web](https://clipboardjs.com/) | [link](https://www.npmjs.com/package/clipboard)| 1.6.1  | To copy data to the clipboard |\n| moment | [web](https://momentjs.com/) | [link](https://www.npmjs.com/moment) | 2.18.1 | Manage dates |\n| @types/markdown-it | | [link](https://www.npmjs.com/package/@types/markdown-it) | 0.0.2 | Type definition for markdown-it. |\n| @types/clipboard |  | [link](https://www.npmjs.com/package/@types/clipboard) | 1.5.31 | Type definition for clipboard library |\n\n\nWe are going to install them now."
      }, {
        "files" : [ {
          "content" : "@import \"./styles/_colors\";\n@import \"./styles/_material.overwrites\";\n@import \"./styles/_preloader\";\n\nbody, html {\n  background-color: $background;\n  color: $color;\n  margin: 0;\n}\n\n.container {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1140px;\n  position: relative;\n}\n\na {\n  color: $colorA200;\n  text-decoration: none;\n  &:hover { color: $color600; }\n}\n\n.fill-remaining-space {\n  flex: 1 1 auto;\n}\n\n.full-width,\n.full-size {\n  width: 100%;\n}\n\n* {\n  outline: 0;\n}\n\n",
          "name" : "styles.scss",
          "order" : 1,
          "path" : "/"
        }, {
          "content" : "$color: #202121;\n$background: #f0f3f2;\n\n$linksocial: #555;\n\n$white:      #fff !default;\n$black:      #000 !default;\n$red:        #d9534f !default;\n$orange:     #f0ad4e !default;\n$yellow:     #ffd500 !default;\n$green:      #5cb85c !default;\n$blue:       #0275d8 !default;\n$teal:       #5bc0de !default;\n$pink:       #ff5b77 !default;\n$purple:     #613d7c !default;\n$blue-dark:  #558abb;\n$blue-light: #dde4e9;\n\n// Create grayscale\n$gray-dark:                 #292b2c !default;\n$gray:                      #464a4c !default;\n$gray-light:                #636c72 !default;\n$gray-lighter:              #d0d0d0 !default;\n$gray-lightest:             #e7e7e9 !default;\n\n$table-border-color: #d0d0d0;\n$table-background: #fff;\n\n$color50:   #e8eaf6;\n$color100:  #b7bec6;\n$color200:  #8792a0;\n$color300:  #576679;\n$color400:  #33465d;\n$color500:  #0f2540;\n$color600:  #0d213a;\n$color700:  #0b1b32;\n$color800:  #08162a;\n$color900:  #040d1c;\n$colorA100: #5196e4;\n$colorA200: #276bff;\n$colorA400: #004cf3;\n$colorA700: #0044da;",
          "name" : "_colors.scss",
          "order" : 2,
          "path" : "/styles/"
        }, {
          "content" : "@import \"./_colors\";\n\n@-webkit-keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg);  } }\n\n@-moz-keyframes spin { \n  0% { -moz-transform: rotate(0deg);  }\n  100% { -moz-transform: rotate(360deg); } }\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); } }\n\n\n#preloader {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 1003;\n  background: $background;\n\n  & > div {\n    display: block;\n    position: relative;\n    left: 50%;\n    top: 50%;\n    width: 150px;\n    height: 150px;\n    margin: -75px 0 0 -75px;\n    border-radius: 50%;\n    border: 3px solid transparent;\n    border-top-color: $color800;\n    transform: translate3d(0, 0, 0);\n    animation: spin 2s linear infinite;\n\n    &:before {\n      content: \"\";\n      position: absolute;\n      top: 5px;\n      left: 5px;\n      right: 5px;\n      bottom: 5px;\n      border-radius: 50%;\n      border: 3px solid transparent;\n      border-top-color: $color500;\n      -webkit-animation: spin 3s linear infinite;\n      animation: spin 3s linear infinite;\n    }\n    &:after {\n      content: \"\";\n      position: absolute;\n      top: 15px;\n      left: 15px;\n      right: 15px;\n      bottom: 15px;\n      border-radius: 50%;\n      border: 3px solid transparent;\n      border-top-color: $color200;\n      animation: spin 1.5s linear infinite;\n    }\n  }\n}\n",
          "name" : "_preloader.scss",
          "order" : 3,
          "path" : "/styles/"
        }, {
          "content" : "@import '~@angular/material/core/theming/all-theme';\n@import \"./_colors\";\n\n@include mat-core();\n$mat-daniru: (\n  50:   $color50,\n  100:  $color100,\n  200:  $color200,\n  300:  $color300,\n  400:  $color400,\n  500:  $color500,\n  600:  $color600,\n  700:  $color700,\n  800:  $color800,\n  900:  $color900,\n  A100: $colorA100,\n  A200: $colorA200,\n  A400: $colorA400,\n  A700: $colorA700,\n  contrast: (\n    50: $black-87-opacity,\n    100: $black-87-opacity,\n    200: $black-87-opacity,\n    300: $black-87-opacity,\n    400: $black-87-opacity,\n    500: white,\n    600: white,\n    700: white,\n    800: $white-87-opacity,\n    900: $white-87-opacity,\n    A100: $black-87-opacity,\n    A200: $black-87-opacity,\n    A400: $black-87-opacity,\n    A700: $black-87-opacity,\n  )\n);\n\n$app-primary: mat-palette($mat-daniru, 500);\n$app-accent:  mat-palette($mat-blue, 100, A100, A400);\n\n// The warn palette is optional (defaults to red).\n$app-warn:  mat-palette($mat-red);\n\n// Create the theme object (a Sass map containing all of the palettes).\n$app-theme: mat-light-theme($app-primary, $app-accent, $app-warn);\n\n// Include theme styles for core and each component used in your app.\n// Alternatively, you can import and @include the theme mixins for each component\n// that you are using.\n@include angular-material-theme($app-theme);\n",
          "name" : "_material.overwrites.scss",
          "order" : 4,
          "path" : "/styles/"
        } ],
        "order" : 4,
        "text" : "## Basic Styles\n\nWe have just installed @angular/material. It will help us to style our blog, most of the components have their own styles built-in.\n\nWe will just need to add a few global styles to complement them, and we will set up our own material palette.\n\nYou can have a look to the material documentation [here](https://material.angular.io). {.alert}\n\nI decided to split the global styles into a few files by topic:\n\n- _colors: to keep all the colors for consistency, and it will be imported by other SCSS files.\n- _material.overwrites: setup of a new custom palette for our material components.\n- _preloader: nice CSSfor the preloader animation.\n"
      }, {
        "files" : [ {
          "content" : "<!-- inside the body -->\n<dr-root>\n    <div id=\"preloader\">\n        <div id=\"spinner\"></div>\n    </div>\n</dr-root>",
          "name" : "index.html",
          "order" : 1,
          "path" : "app/"
        } ],
        "order" : 5,
        "text" : "We add the preloader animation inside our dr-root component in index.html"
      }, {
        "order" : 6,
        "text" : "This is just a design idea. Feel free to adapt any styles/colors as you want across of the articles. I am not going to pay much attention to most of the styles as it is not the goal. {.alert .alert-secondary }"
      }, {
        "files" : [ {
          "content" : "<!-- append to the bottom of the head -->\n<link href=\"https://fonts.googleapis.com/css?family=Roboto|Kalam\" rel=\"stylesheet\">\n<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n",
          "name" : "index.html",
          "order" : 1,
          "path" : "/"
        }, {
          "content" : "...\n      \"styles\": [\n        \"../node_modules/font-awesome/css/font-awesome.min.css\",\n        \"styles.scss\"\n      ],\n...",
          "name" : ".angular-cli.json",
          "order" : 2
        } ],
        "order" : 7,
        "text" : "\n## Fonts\n\nOur main font will be Roboto, the material standard one. We include an extra font from Google Fonts just for the title, and Material Icons to use them in the app. We just need to add them in the index.html\n\nMaterial icons do not contain all the icons that we need, so we add Font Awesome. We need to reference its style file in the styles array inside **@angular/cli** configuration file."
      }, {
        "files" : [ {
          "content" : "//... other imports\n\nimport { MaterialModule } from '@angular/material';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n@NgModule({\n  //... other metadata\n  imports: [\n    //... other imports\n    MaterialModule,\n    BrowserAnimationsModule \n])\nexport class AppModule { }\n",
          "name" : "app.module.ts",
          "order" : 1,
          "path" : "app/"
        }, {
          "content" : "//... other imports\nimport { MdToolbarModule } from '@angular/material';\n\n@NgModule({\n  //... other metadata\n  imports: [\n    //... other imports\n    MdToolbarModule\n  ]\n})\nexport class SharedModule { }\n",
          "name" : "shared.module.ts",
          "order" : 2,
          "path" : "app/shared/"
        }, {
          "content" : "<md-toolbar color=\"primary\">\n  <div class=\"logo\" routerLink=\"/\">Daniru</div>\n</md-toolbar>\n",
          "name" : "header.component.html",
          "order" : 3,
          "path" : "app/shared/components/header/"
        }, {
          "content" : ".logo {\n  cursor: pointer;\n  font-family: 'Kalam', cursive;\n  font-size: 25px;\n  text-transform: uppercase;\n}\n\n",
          "name" : "header.component.scss",
          "order" : 4,
          "path" : "app/shared/components/header/"
        } ],
        "order" : 8,
        "text" : "## Header\n\nWe are going to use the Material Toolbar component to improve the header component style. To use Material, we will need to import the module in our **App.Module**. \n\nAs Material is using animations, we will need to import the **BrowserAnimationsModule** from **@angular/platform-browser/animations**. {.alert .alert-warning}\n\nIn the Share module, we will need to import only MdToolbarModule from @angular/material, that way any template in that module will be able to use the toolbar components. We will use them in the header template.\n\nLet's have a look how to do it."
      }, {
        "files" : [ {
          "content" : "ng g interface blog/models/section\nng g interface blog/models/file",
          "order" : 1
        } ],
        "order" : 9,
        "text" : "## Extending Models\n\nOur current implementation of the Blog interface only contains two properties *(key and title)*. We are going to extend it adding a few more properties and an array of sections. Each section could contain a text or/and an array of files.\n\n\nWe create the section and file interfaces:"
      }, {
        "order" : 10,
        "text" : "and copy the following structure."
      }, {
        "files" : [ {
          "content" : "import { Section } from './section';\n\nexport interface Blog {\n  key: string;\n  header: string | null;\n  title: string;\n  date_created: Date;\n  date_published: Date | null;\n  sections: Section[];\n}\n",
          "name" : "blog.ts",
          "order" : 1,
          "path" : "app/blog/models/"
        }, {
          "content" : "import { File } from './file';\n\nexport interface Section {\n  text: string | null;\n  files: File[] | null;\n  order: number;\n}\n",
          "name" : "section.ts",
          "order" : 2,
          "path" : "app/blog/services/models/"
        }, {
          "content" : "export interface File {\n  name: string | null;\n  path: string | null;\n  content: string;\n  order: number;\n}\n",
          "name" : "file.ts",
          "order" : 3,
          "path" : "app/blog/services/models/"
        } ],
        "order" : 11,
        "text" : "\n"
      }, {
        "files" : [ {
          "content" : "import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { Observable, Subject } from 'rxjs/Rx';\nimport { Blog } from '../models/blog';\n\n@Injectable()\nexport class BlogService {\n\n  private _localCache: Blog[] = [];\n  private _blogSubject: Subject<Blog[]>;\n\n  // Initialize subject and request JSON file to store in the localCache.\n  constructor(private http: Http) {\n    this._blogSubject = new Subject<Blog[]>();\n    this.http\n      .get('./assets/data/data.json')\n      .map((res) =>  this._convertObjectToArray(res.json().blog))\n      .do((x) => {\n        this._localCache = x;\n        this._blogSubject.next(x);\n      })\n      .subscribe();\n  }\n\n  // Get blogs from the localCache or the observable\n  getBlogs(): Observable<Blog[]> {\n    return Observable.of(this._localCache)\n      .merge(this._blogSubject.asObservable())\n      .map((res) => res.reverse() );\n  }\n\n  // Get blog from the localCache or the observable\n  getBlog(key: string): Observable<Blog> {\n    const blog = this._localCache.filter(x => x.key === key);\n    const localObservable = Observable.of(blog || []);\n    return Observable\n      .merge(localObservable, this._blogSubject.asObservable())\n      .map(res => { return res && res.length === 0 ? null : res.find(x => x.key === key); });\n  }\n\n  // Convert object to array function\n  private _convertObjectToArray(data: any): Blog[] {\n    return Object.keys(data).map((key: string) => {\n      return <Blog>data[key];\n    });\n  }\n}\n",
          "name" : "blog.service.ts",
          "order" : 1,
          "path" : "app/blog/services/"
        } ],
        "order" : 12,
        "text" : "## Refactor Service to use JSON file\n\nWe need data that match our new interface definitions. We refactor our service to read data from a JSON file to match the same structure.\n\nI have created some sample data in a JSON file [here](https://raw.githubusercontent.com/daniru/blog/step_3/src/assets/data/data.json) that contains data exported from the firebase list that we will be using later on. So we can export/import the JSON file to work locally and remotely.  We can copy the file in **assets/data/data.json**. {.alert .alert-info}\n\nLet's have a look at the new blogService implementation."
      }, {
        "order" : 13,
        "text" : "As the firebase list is an object with properties, we need to create a function *_convertObjectToArray* to get the keys of the objects and insert the value in an array. {.alert .alert-warning}\n\nNotice that we have added some new stuff. We read our file in the constructor, transform the data and populate the cache object. That way we only read the file once when the service is instantiated. Once we have the data ready, we emit that data in the Subject that we have created.\n\nA subject represents an object that is both an observable sequence as well as an observer. It acts as an Observer when we emit through it an event as soon as the data ready.\n\nIn the *getBlogs*, and *getBlog* methods, we get the data from the cache, and we merge with our Subject as an Observable. We do that in case that a component subscribes to the observable before we have any data in the cache object. In that case, it will receive and empty array/value when they subscribe, but as soon as we load the data from the file, they will receive the data through it.\n\nNow, the site should be displaying the header and three different titles. {.alert .alert-success}\n"
      }, {
        "files" : [ {
          "content" : "ng g component blog/components/itemHeader",
          "order" : 1
        } ],
        "order" : 14,
        "text" : "## Blog Header Component\n\nNow that we have our data layer ready, we are going to display all this new information in our views. \n\nWe create the *item-header* component, that will be used in the list-item and item views. The component will have two inputs:\n\n- The Blog information.\n- A boolean to indicate if is the list-item or item.\n\nWe create it..."
      }, {
        "files" : [ {
          "content" : "import { Component, OnChanges, Input, Inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { Blog } from '../../models/blog';\n\nconst window: any = {};\n\n@Component({\n  selector: 'dr-item-header',\n  templateUrl: './item-header.component.html',\n  styleUrls: ['./item-header.component.scss']\n})\nexport class ItemHeaderComponent implements OnChanges {\n\n  @Input() blog: Blog;\n  @Input() headerLink: boolean;\n\n  public socialLinks: any[];\n\n  constructor(@Inject(DOCUMENT) private document: any) {\n    this.socialLinks = [];\n  }\n\n  ngOnChanges() {\n    if (this.blog) {\n      this._populateSocialLinks();\n    }\n  }\n\n  private _populateSocialLinks() {\n      const shareText = `Have a look the new post by daniru ${this.blog.title}`;\n      const shareLink = `${this.document.location.href}${this.blog.key}`;\n\n      this.socialLinks = [\n        { url: `https://plus.google.com/share?url=${shareLink}`, icon: 'fa fa-google' },\n        { url: `https://www.facebook.com/sharer.php?u=${shareLink}&amp;t=${shareText}`, icon: 'fa fa-facebook'  },\n        { url: `https://twitter.com/share?text=${shareText}`, icon: 'fa fa-twitter'   },\n        { url: `http://pinterest.com/pin/create/button/?url=${shareLink}&amp;description=${shareText}`, icon: 'fa fa-pinterest' },\n        { url: `http://www.linkedin.com/shareArticle?mini=true&amp;url={{shareLink}}&amp;title=${shareText}`, icon: 'fa fa-linkedin'  }\n      ];\n  }\n\n}\n",
          "name" : "item-header.component.ts",
          "order" : 1,
          "path" : "app/blog/components/item-header/"
        }, {
          "content" : "<md-card-title>\n  <h2 *ngIf=\"blog.header\"  color=\"primary\">{{blog.header}}</h2>\n  <h3>Article By <span>Daniru</span> &#8226; {{blog.date_published | date:'dd MMMM y'}}</h3>\n  <h1 *ngIf=\"!headerLink\">{{blog.title}}</h1>\n  <h1 *ngIf=\"headerLink\"><a [routerLink]=\"blog.key\">{{blog.title}}</a></h1>\n  <h4>\n    <div>\n      <a md-mini-fab color=\"accent\" *ngFor=\"let item of socialLinks\" [href]=\"item.url\" onclick='window.open(this.href,\"popupwindow\", \"width=800,height=500,left=200,top=5,scrollbars,toolbar=0,resizable\"); return false;' target=\"social\">\n        <i [class]=\"item.icon\"></i>\n      </a>\n    </div>\n  </h4>\n</md-card-title>\n",
          "name" : "item-header.component.html",
          "order" : 2,
          "path" : "app/blog/components/item-header/"
        }, {
          "content" : "@import \"../../../../styles/_colors\";\n\n:host {\n  width: 100%;\n}\n\nmd-card-title {\n  text-align: center;\n  width: 100%;\n}\n\nh1 {\n  color: black;\n  font-size: 30px;\n  font-weight: normal;\n  margin-bottom: 10px;\n  padding: 0 0 10px;\n  text-transform: capitalize;\n  a {\n    color: $color500;\n    opacity: 1;\n    &:hover { opacity: 0.8;} \n  }\n}\n\nh2 {\n  border-bottom: 3px solid $colorA100;\n  display: inline;\n  font-size: 12px;\n  padding: 20px 5px 0px;\n  font-weight: normal;\n  text-transform: uppercase;\n}\n\nh3 {\n  color: $color400;\n  font-size: 14px;\n  font-weight: normal;\n  margin-bottom: 0px;\n  text-transform: uppercase;\n  opacity: 1;\n  \n}\n\nh4 {\n  display: inline;\n  button,\n  a {\n    font-size: 20px;\n    margin: 0px 5px; \n    opacity: 1;\n    &:hover { opacity: 0.8; }\n  }\n}\n\na {\n  cursor: pointer;\n  padding: 0;\n}\n",
          "name" : "item-header.component.scss",
          "order" : 3,
          "path" : "app/blog/components/item-header/"
        } ],
        "order" : 15,
        "text" : "and replace it with the following code:"
      }, {
        "files" : [ {
          "content" : "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MdCardModule, MdButtonModule } from '@angular/material';\nimport { BlogRoutingModule } from './blog-routing.module';\nimport { BlogService } from './services/blog.service';\nimport { ListComponent } from './components/list/list.component';\nimport { ListItemComponent } from './components/list-item/list-item.component';\nimport { ItemComponent } from './components/item/item.component';\nimport { ItemHeaderComponent } from './components/item-header/item-header.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    BlogRoutingModule,\n    MdCardModule, MdButtonModule\n  ],\n  providers: [BlogService],\n  declarations: [ListComponent, ListItemComponent, ItemComponent, ItemHeaderComponent]\n})\nexport class BlogModule { }\n",
          "name" : "blog.module.ts",
          "order" : 1,
          "path" : "/src/app/blog/"
        } ],
        "order" : 16,
        "text" : "In the component logic, we have created a public property *headerLinks*. Everytime that any input changes, we check if the required input exists and, we call a method to populate the array with the info to generate the link to the social networks.\n\nAngular provides a way to be able to detect any changes in the **Input()** parameters. We need to implement the **OnChanges** interface and implement the method **ngOnChanges ** that will be called every time any change is detected. {.alert .alert-info}\n\nIn the template we can notice a couple of things: \n\n- We are using another built-in directive, **ngIf**. This is rendering or not the template depending on the condition.\n- To show the date of the post in the template, we are using the built-in pipe [**date**](https://angular.io/docs/ts/latest/api/common/index/DatePipe-pipe.html), to help us to transform the date to our desired format.\n- We are using two new material component, MdCardTitle and MdMiniFab. We will need to import **MdCardModule** and **MdButtonModule** to our blog.module to be able to render those components.\n\n\n\nWe have some built-in pipes in angular. You can read more about them [here](https://angular.io/docs/ts/latest/guide/pipes.html) {.alert .alert-info}\n\n"
      }, {
        "files" : [ {
          "content" : "<div class=\"container\" *ngIf=\"blog\">\n  <md-card>\n    <md-card-header>\n      <dr-item-header [blog]=\"blog\" [headerLink]=\"false\"></dr-item-header>\n    </md-card-header> \n    <md-card-content>\n    </md-card-content>\n  </md-card>\n</div>",
          "name" : "item.component.html",
          "order" : 1,
          "path" : "app/blog/components/item/"
        }, {
          "content" : "md-card {\n  margin: 10px;\n}\n\nmd-card-header {\n  height: auto;\n}",
          "name" : "item.component.scss",
          "order" : 2,
          "path" : "app/blog/components/item/"
        }, {
          "content" : "<div class=\"container\">\n  <md-card>\n    <md-card-header>\n      <dr-item-header [blog]=\"blog\" [headerLink]=\"true\"></dr-item-header>\n    </md-card-header> \n    <md-card-content>\n    </md-card-content>\n    <md-card-actions>\n      <button md-raised-button color=\"accent\" [routerLink]=\"blog.key\">Read More</button>\n    </md-card-actions>\n  </md-card>\n</div>\n",
          "name" : "list-item.component.html",
          "order" : 3,
          "path" : "app/blog/components/list-item/"
        }, {
          "content" : "md-card {\n  margin: 10px;\n}\n\nmd-card-header {\n  height: auto;\n}\n\nmd-card-actions {\n  text-align: center;\n  button {\n    opacity: 1;\n    &:hover { opacity: 0.8; }\n  }\n}",
          "name" : "list-item.component.scss",
          "order" : 4,
          "path" : "app/blog/components/list-item/"
        } ],
        "order" : 17,
        "text" : "We use this new **itemHeader** Component in the **item** and **listItem** templates.\n"
      }, {
        "order" : 18,
        "text" : "Now, we can navigate, as before, between the blog and the list, but with a nicer look."
      }, {
        "files" : [ {
          "content" : "ng g c blog/components/itemSection",
          "order" : 1
        } ],
        "order" : 19,
        "text" : "## Section Component\n\nIf we have a look at the interfaces again, each blog has an array of sections, and they can have a text and/or a list of files.\n\nWe create a new section component to display the data of each section. It will have a single input parameter with the section that we will use in the template straight away.\n\nAs usual:\n"
      }, {
        "files" : [ {
          "content" : "import { Component, Input  } from '@angular/core';\nimport { Section } from '../../models/section';\n\n@Component({\n  selector: 'dr-item-section',\n  templateUrl: './item-section.component.html',\n  styleUrls: ['./item-section.component.scss']\n})\nexport class ItemSectionComponent {\n\n  @Input() section: Section;\n\n}\n",
          "name" : "item-section.component.ts",
          "order" : 1,
          "path" : "app/blog/components/item-section/"
        }, {
          "content" : "<div *ngIf=\"section?.text\">\n  <div id=\"wrapper\">{{section.text}}</div>\n</div>",
          "name" : "item-section.component.html",
          "order" : 2,
          "path" : "app/blog/components/item-section/"
        }, {
          "content" : "@import '../../../../styles/_colors';\n\n:host {\n  font-size: 17px;\n  text-align: justify;\n\n  /deep/ {\n\n    blockquote,\n    .alert {\n      background: $gray-lightest;\n      border-left: 4px solid $gray-light;\n      border-width: 0 0 0 5px;\n      color: $gray-light;\n      margin: 10px 0 10px 0;\n      padding: 15px;\n      &.alert-primary {   border-color: $blue;        background-color: lighten($blue, 40%); }\n      &.alert-success {   border-color: $green;       background-color: lighten($green, 40%); }\n      &.alert-info {      border-color: $gray-light;  background: $gray-lightest; }\n      &.alert-warning {   border-color: $orange;      background-color: lighten($orange, 30%);  }\n      &.alert-danger {    border-color: $red;         background-color: lighten($red, 30%); }\n      &.alert-inverse {   border-color: $gray-dark;   background-color: lighten($gray-dark, 40%); }\n      &.alert-secondary { border-color: $gray-light;  background: $gray-lightest; }\n    }\n\n    h2 {\n      border-bottom: 1px solid $colorA100;\n      font-size: 25px;\n      margin: 30px 0;\n      opacity: .7;\n      padding: 5px 0;\n    }\n\n    h3 {\n      font-size: 22px;\n      margin: 30px 0;\n      opacity: .6;\n      padding: 5px 0;\n    }\n\n    code {\n      background: $white;\n      border: 1px solid $gray-lighter;\n      display: block;\n      font-size: 12px;\n      padding: 10px;\n    }\n\n    table {\n      background: $table-background;\n      margin-bottom: 1rem;\n      max-width: 100%;\n      width: 100%;\n\n      th,\n      td {\n        border-bottom: 1px solid $table-border-color;\n        margin-bottom: 1rem;\n        padding: .74rem;\n        vertical-align: top;\n      }\n\n      thead th {\n        border-bottom: 2px solid $table-border-color;\n        vertical-align: bottom;\n      }\n\n      tbody + tbody {\n        border-top: 2px solid $table-border-color;\n      }\n    }\n  }\n}\n",
          "name" : "item-section.component.scss",
          "order" : 3,
          "path" : "app/blog/components/item-section/"
        } ],
        "order" : 20,
        "text" : "And the code as follows:"
      }, {
        "files" : [ {
          "content" : "<div class=\"container\" *ngIf=\"blog\">\n  <md-card>\n    <md-card-header>\n      <dr-item-header [blog]=\"blog\" [headerLink]=\"false\"></dr-item-header>\n    </md-card-header> \n    <md-card-content>\n        <dr-item-section *ngFor=\"let section of blog.sections\" [section]=\"section\"></dr-item-section>\n    </md-card-content>\n  </md-card>\n</div>",
          "name" : "item.component.html",
          "order" : 1,
          "path" : "app/blog/components/item/"
        }, {
          "content" : "<div class=\"container\">\n  <md-card>\n    <md-card-header>\n      <dr-item-header [blog]=\"blog\" [headerLink]=\"true\"></dr-item-header>\n    </md-card-header>\n    <md-card-content>\n      <dr-item-section [section]=\"firstSection\"></dr-item-section>\n    </md-card-content>\n    <md-card-actions>\n      <button md-raised-button color=\"accent\" [routerLink]=\"blog.key\">Read More</button>\n    </md-card-actions>\n  </md-card>\n</div>\n",
          "name" : "list-item.component.html",
          "order" : 2,
          "path" : "app/blog/components/list-item/"
        }, {
          "content" : "import { Component, Input, OnChanges } from '@angular/core';\nimport { Blog } from '../../models/blog';\nimport { Section } from '../../models/section';\n\n@Component({\n  selector: 'dr-list-item',\n  templateUrl: './list-item.component.html',\n  styleUrls: ['./list-item.component.scss']\n})\nexport class ListItemComponent implements OnChanges {\n\n  @Input() blog: Blog;\n  public firstSection: Section;\n\n  ngOnChanges() {\n    if (this.blog) {\n      this.firstSection = this.blog.sections.find((x) => x.order === 1);\n    }\n  }\n}\n",
          "name" : "list-item.component.ts",
          "order" : 3,
          "path" : "app/blog/components/list-item/"
        } ],
        "order" : 21,
        "text" : "Notice in the SCSS what we are using /deep/. This is needed to be able to style inside to the shadow DOM. {.alert }\n\nWe will use the new component in **item.component** and **list-item.component**, the first one will display all the sections and the second only the first section. We have the code for those components here:"
      }, {
        "files" : [ {
          "content" : "ng g pipe shared/pipes/markdown --export",
          "order" : 1
        } ],
        "order" : 22,
        "text" : "## Custom Markdown Pipe\n\nThe input text will support Markdown, so we will need to transform it. In the item header, we have been using the built-in pipe *date* to transform the date to the desired format. But Angular doesn't have any to transform markdown, so we will need to create a custom pipe to transform our raw markdown text.\n\nAngular provides us with the @Pipe decorator to do it. Let's create it in our shared module."
      }, {
        "files" : [ {
          "content" : "import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport * as MarkdownIt from 'markdown-it';\n\ndeclare var require: any;\nconst markdownItAttrs = require('markdown-it-attrs');\n\n@Pipe({\n  name: 'markdown'\n})\nexport class MarkdownPipe implements PipeTransform {\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  transform(data: string): SafeHtml {\n    if (data) {\n      const md = new MarkdownIt();\n      md.use(markdownItAttrs);\n      return this.sanitizer.bypassSecurityTrustHtml(md.render(data));\n    } else {\n      return this.sanitizer.bypassSecurityTrustHtml('No Data');\n    }\n  }\n}\n",
          "name" : "markdown.pipe",
          "order" : 1,
          "path" : "app/shared/pipes/"
        } ],
        "order" : 23,
        "text" : "We will use two of the libraries **markdown-it** and **markdown-it-attrs** to transform markdown text to a normal HTML. The first one makes the transformation itself,  the second one provides the option to add classes.\n\nIn the transform method, we receive a string, and we apply the markdown libraries to transform it to HTML code. We will need to use the Sanitizer provider from Angular to let angular know that it can trust on that raw htHTMLml.\n\nBy default angular sanitize the text to avoid XSS risks. We need to be sure that the data that we bypass is completely secure, we know the source and doesn't contain dangerous scripts {.alert .alert-danger}\n"
      }, {
        "files" : [ {
          "content" : "// ... imports\nimport { SharedModule } from '../shared/shared.module';\n\n@NgModule({\n  // ... metatada \n  imports: [\n    // ... imports\n    SharedModule\n  ]\n})\nexport class BlogModule { }\n",
          "name" : "blog.module.ts",
          "order" : 1,
          "path" : "app/blog/"
        }, {
          "content" : "<div *ngIf=\"section?.text\">\n  <div id=\"wrapper\" [innerHTML]=\"section.text | markdown\"></div>\n</div>",
          "name" : "item-section.component.html",
          "order" : 2,
          "path" : "app/blog/components/item-section/"
        } ],
        "order" : 24,
        "text" : "To be able to consume it from our ItemSection Component, we will need to import the Shared Module in our BlogModule, and update our ItemSection template to use it.\n"
      }, {
        "files" : [ {
          "content" : "ng g c blog/components/itemFiles",
          "order" : 1
        } ],
        "order" : 25,
        "text" : "## File Component\n\nWe need a component to display all the files. We will use the tab component from material to display the array of files and we will format the file using a new pipe.\n\nLet's start adding the component."
      }, {
        "files" : [ {
          "content" : "import { Component, Input, OnChanges } from '@angular/core';\nimport { File } from './../../models/file';\n\n@Component({\n  selector: 'dr-item-files',\n  templateUrl: './item-files.component.html',\n  styleUrls: ['./item-files.component.scss']\n})\nexport class ItemFilesComponent {\n\n  @Input() files: File[];\n\n  getClass(file: File): string {\n    if (!file.name) { return ''; }\n\n    const split = file.name.split('.');\n    const extension = split[split.length - 1];\n    switch (extension) {\n      default: return `file lang-${extension}`;\n    }\n  }\n}\n",
          "name" : "item-files.component.ts",
          "order" : 1,
          "path" : "app/blog/components/item-files/"
        }, {
          "content" : "<section *ngIf=\"files\">\n  <md-tab-group *ngIf=\"files.length > 1 || (files.length === 1 && files[0].name)\">\n    <md-tab *ngFor=\"let file of files\">\n      <ng-template md-tab-label>\n        <section [class]=\"getClass(file)\" class=\"filesheader\">\n          <div class=\"path\" *ngIf=\"file.path\">{{file.path}}</div>\n          <div class=\"filename\" *ngIf=\"file.name\">{{file.name}}</div>\n        </section>\n      </ng-template>\n      <section>\n        <pre class=\"prettyprint prettyprinted\" [innerHTML]=\"file.content\"></pre>\n      </section>\n    </md-tab>\n  </md-tab-group>\n  <section *ngIf=\"files.length === 1 && ! files[0].name\">\n    <pre class=\"prettyprint prettyprinted\" [innerHTML]=\"files[0].content\"></pre>\n  </section>\n</section>\n",
          "name" : "item-files.component.html",
          "order" : 2,
          "path" : "app/blog/components/item-files/"
        }, {
          "content" : "@import \"../../../../styles/_colors\";\n\nmd-tab-group {\n  background-color: $color50;\n  /deep/ {\n    .path {\n      color: $color700;\n      font-size: 0.7em;\n      position: absolute;\n      width: 100%;\n      text-align: left;\n      top: -12px;\n    }\n\n    .md-tab-label-active { opacity: 1; }\n    .md-tab-header { border-color: $color100; }\n\n    .filename {\n      font-size: 1em;\n      padding-top: 5px;\n    }\n\n    .file {\n\n      &.lang-html {\n        color: $green;\n      }\n      &.lang-ts {\n        color: $blue;;\n      }\n      &.lang-scss {\n        color: $purple;\n      }\n    }\n  }\n}\n\npre {\n  font-size: 80%;\n  margin: 0;\n  overflow: auto;\n  padding: 10px 20px;\n}\n\n",
          "name" : "item-files.component.scss",
          "order" : 3,
          "path" : "app/blog/components/item-files/"
        } ],
        "order" : 26,
        "text" : "The component has one Input property, the array of files, and one method to calculate the class depending on the filename.\n\nIn the template we will check if we have some information in the *files* property to render a tab control, showing the title of the files or file if has a filename, and the content of it using a new custom pipe called prettyfile. If we only have one file without a name, we will only show the content of the file.\n"
      }, {
        "files" : [ {
          "content" : "<div *ngIf=\"section?.text\">\n  <div id=\"wrapper\" [innerHTML]=\"section.text | markdown\"></div>\n</div>\n<div *ngIf=\"section?.files\">\n  <dr-item-files [files]=\"section.files\"></dr-item-files>\n</div>",
          "name" : "item-section.component.html",
          "order" : 1,
          "path" : "app/blog/components/item-section/"
        }, {
          "content" : "import { MdCardModule, MdButtonModule, MdTabsModule } from '@angular/material';\n...\n\n@NgModule({\n  imports: [\n    ...\n    MdTabsModule\n    ...\n  ],",
          "name" : "blog.module.ts",
          "order" : 2,
          "path" : "app/blog/"
        } ],
        "order" : 27,
        "text" : "We will use the new component in our **item-section** template.\n\nRemember to include the MdTabsModule in the blog.module to be able to use it. {.alert .alert-warning}"
      }, {
        "files" : [ {
          "content" : "ng g pipe shared/pipes/prettyfile --export",
          "order" : 1
        } ],
        "order" : 28,
        "text" : "## PrettyFile pipe\n\nWe need another custom Pipe to transform the raw content and a formatted one. We will use *google-code-prettify* library to make nicer the content of the files."
      }, {
        "files" : [ {
          "content" : "import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\ndeclare var require: any;\nconst PR = require('google-code-prettify/bin/prettify.min');\n\n@Pipe({\n  name: 'prettyfile'\n})\nexport class PrettyfilePipe implements PipeTransform {\n\n  private _entityMap: any = {\n    '<': `&lt;`,\n    '>': '&gt;',\n    '\"': '&quot;',\n    '\\'': '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;',\n    '&': '&amp;',\n  };\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  transform(content: string, filename: string): SafeHtml {\n    const language = this._getLanguage(filename);\n    let text = this._escapeHtml(content);\n\n    text = PR.prettyPrintOne(text, language, false);\n    return this.sanitizer.bypassSecurityTrustHtml(text);\n  }\n\n  private _getLanguage(filename: string): string {\n    if (!filename) { return ''; }\n    const split = filename.split('.');\n    if (split.length <= 1) { return ''; }\n    const extension = split[split.length - 1];\n    switch (extension) {\n      case 'scss': return 'css';\n      default: return `${extension}`;\n    }\n  }\n\n  private _escapeHtml(string: string): string {\n    return String(string).replace(/[&<>\"'`=\\/]/g, (s) => this._entityMap[s] );\n  }\n}\n",
          "name" : "prettyfile.pipe.ts",
          "order" : 1,
          "path" : "app/shared/pipes/"
        } ],
        "order" : 29,
        "text" : "\nThe pipe is pretty similar to the previous one, we have a couple of private methods to identify the language from the extension, and to escape the especial characters. \n"
      }, {
        "files" : [ {
          "content" : "      \"styles\": [\n        \"../node_modules/font-awesome/css/font-awesome.min.css\",\n        \"../node_modules/google-code-prettify/bin/prettify.min.css\",\n        \"./styles/github-v2.min.css\",\n        \"styles.scss\"\n      ],",
          "name" : ".angular-cli.json",
          "order" : 1
        } ],
        "order" : 30,
        "text" : "We need to import the default styles from the *prettify* library and include them in the styles sections inside the angular/CLI configuration file.\n\nIf you want to apply a custom style (as I did with githubv2 style), you can download the file, add it in the styles folder and import it the same way as the prettify CSS file. There are plenty of styles to apply to prettyPrint, you can find a few [here](https://jmblog.github.io/color-themes-for-google-code-prettify/) and [here](https://github.com/daylerees/colour-schemes/tree/master/prettyprint);\n"
      }, {
        "files" : [ {
          "content" : "<section *ngIf=\"files\">\n  <md-tab-group *ngIf=\"files.length > 1 || (files.length === 1 && files[0].name)\">\n    <md-tab *ngFor=\"let file of files\">\n      <template md-tab-label>\n        <section [class]=\"getClass(file)\" class=\"filesheader\">\n          <div class=\"path\" *ngIf=\"file.path\">{{file.path}}</div>\n          <div class=\"filename\" *ngIf=\"file.name\">{{file.name}}</div>\n        </section>\n      </template>\n      <section>\n        <pre class=\"prettyprint prettyprinted\" [innerHTML]=\"file.content | prettyfile:file.name\"></pre>\n      </section>\n    </md-tab>\n  </md-tab-group>\n  <section *ngIf=\"files.length === 1 && ! files[0].name\">\n    <pre class=\"prettyprint prettyprinted\" [innerHTML]=\"files[0].content | prettyfile:files[0].name\"></pre>\n  </section>\n</section>\n",
          "name" : "item-files.component.html",
          "order" : 1,
          "path" : "app/blog/components/item-files/"
        } ],
        "order" : 31,
        "text" : "We are ready to use the pipe in the FilesTemplate."
      }, {
        "files" : [ {
          "content" : "ng g d shared/directives/clipboard --export",
          "order" : 1
        } ],
        "order" : 32,
        "text" : "## Clipboard Directive\n\nWe want to offer the user a quick way to copy the content of our files.  We are going to create a directive called clipboard, as we need some interaction with the DOM."
      }, {
        "files" : [ {
          "content" : "import { Directive, OnInit, Input, ElementRef, HostListener, Renderer2 } from '@angular/core';\nimport * as Clipboard from 'clipboard';\n\n@Directive({\n  selector: '[drClipboard]'\n})\nexport class ClipboardDirective  {\n\n  @Input() text: string;\n  private _button: any;\n\n  @HostListener('mouseenter') onMouseEnter() {\n    if (!this._button) {\n      this._button = this._renderer.createElement('button');\n      this._button.innerHTML = 'copy';\n      this._button.className = 'copybutton mat-accent mat-raised-button';\n      this._element.nativeElement.append(this._button);\n      this._renderer.listen(this._button, 'click', () => { this._copyToClipboard(); return true; });\n    } else {\n      this._button.className = 'copybutton mat-accent mat-raised-button';\n    }\n  }\n\n  @HostListener('mouseleave') onMouseLeave() {\n    if (this._button) {\n      this._button.className = 'hiddenbutton';\n    }\n  }\n\n  constructor(private _element: ElementRef, private _renderer: Renderer2) {\n  }\n\n  private _copyToClipboard() {\n    const clipboard = new Clipboard(this._element.nativeElement, { text: () => this.text });\n    clipboard.on('success', (e) => { clipboard.destroy(); });\n  }\n}\n",
          "name" : "clipboard.directive.ts",
          "order" : 1,
          "path" : "app/shared/directives/"
        } ],
        "order" : 33,
        "text" : "In the directive, we create two **@HostListener()** to listen when the mouse enters or leaves the element.\n\nWhen the mouse first enters, we will create a button, and after that, we will be hiding or showing it when we leave or enter the elements. \n\nWhen we click on the button, we will copy the content of the file to the clipboard thanks to the clipboard library."
      }, {
        "files" : [ {
          "content" : "<!-- ... -->\n      <section class=\"down\" drClipboard [text]=\"file.content\">\n        <pre class=\"prettyprint prettyprinted\" [innerHTML]=\"file.content | prettyfile:file.name\"></pre>\n      </section>\n  <!-- ... -->\n  <section class=\"down\" *ngIf=\"files.length === 1 && ! files[0].name\" drClipboard [text]=\"files[0].content\">\n    <pre class=\"prettyprint prettyprinted\" [innerHTML]=\"files[0].content | prettyfile:files[0].name\"></pre>\n  </section>\n<!-- ... -->\n",
          "name" : "item-files.component.html",
          "order" : 1,
          "path" : "app/blog/components/item-files/"
        }, {
          "content" : "// ... append to the button \n\n.copybutton {\n  position: absolute;\n  right: 7px;\n  top: 7px;\n  height: 22px;\n  line-height: initial;\n  background: $color300;\n  color: $background;\n}\n\n.hiddenbutton {\n  display: none;\n}\n\n.down {\n  position: relative;\n}",
          "name" : "item-files.component.scss",
          "order" : 2,
          "path" : "app/blog/components/item-files/"
        } ],
        "order" : 34,
        "text" : "We will use it in the blog-file components, so we will modify our blog-files template, to add the directive and add some CSS to show the button in the top right corner of the box."
      }, {
        "files" : [ {
          "content" : "ng g c blog/components/pagination",
          "order" : 1
        } ],
        "order" : 35,
        "text" : "## Pagination\n\nBefore finish the article, we have notice that we have been created a few blogs testing, and the list page has grown too big. So it is a good idea to implement pagination. "
      }, {
        "files" : [ {
          "content" : "import { Component, Output, EventEmitter, Input } from '@angular/core';\n\n@Component({\n  selector: 'dr-pagination',\n  templateUrl: './pagination.component.html',\n  styleUrls: ['./pagination.component.scss']\n})\nexport class PaginationComponent {\n\n  @Input() page: number;\n  @Input() pages: number[];\n  @Output() pageChange = new EventEmitter();\n\n  setPage(num: number) {\n    this.pageChange.emit(num);\n  }\n}\n",
          "name" : "pagination.component.ts",
          "order" : 1,
          "path" : "app/blog/components/pagination/"
        }, {
          "content" : "<section>\n    <button md-raised-button\n      [disabled]=\"page === 1\"\n      (click)=\"setPage(page - 1)\">Previous</button>\n    <button md-raised-button\n      *ngFor=\"let num of pages\"\n      [class.active]=\"page===num\"\n      (click)=\"page!==num && setPage(num)\">{{num}}</button>\n    <button md-raised-button\n      [disabled]=\"page === pages.length\"\n      (click)=\"setPage(page + 1)\">Next</button>\n</section>",
          "name" : "pagination.component.html",
          "order" : 2,
          "path" : "app/blog/components/pagination/"
        }, {
          "content" : "section {\n  display: block;\n  margin-bottom: 20px;\n  text-align: center;\n}\n\nbutton.active {\n  background: #b7bec6;\n}",
          "name" : "pagination.component.scss",
          "order" : 3,
          "path" : "app/blog/components/pagination/"
        } ],
        "order" : 36,
        "text" : "Our component will display the selector page. It will take two input (current page and an array of available pages) and one output event to notify the parent the new page.\n\nWe are going to use a couple of new object from angular, **@Output** and **EventEmitter**. Those allow us to communicate with the parent emitting events sending information. There parent will execute the function assigned to the event **(pageChange)=\"doSomething($event)\"**.\n\nHere is our implementation of the component."
      }, {
        "files" : [ {
          "content" : "  // new properties\n  public get page(): number {\n    return this._page;\n  }\n\n  public get pages(): number[] {\n    return Array(Math.ceil(this._count / this._blogsByPage)).fill(null).map((x, i) => i + 1);\n  }\n\n  private _count: number;\n  private _page: number;\n  private _blogsByPage: number;\n\n  constructor(private http: Http) {\n\n    // initialize them in the constuctor\n    this._page = 1;\n    this._count = 0;\n    this._blogsByPage = 3;\n\n    //...\n  }\n\n  // replace method\n  getBlogs(): Observable<Blog[]> {\n    return Observable.of(this._localCache)\n      .merge(this._blogSubject.asObservable())\n      .map((res) => {\n        this._count = res.length;\n        return res.reverse().slice((this._page - 1) * this._blogsByPage, (this._page) * this._blogsByPage);\n      });\n  }\n\n // add method\n  setPage(num: number) {\n    this._page = num;\n    this._blogSubject.next(this._localCache);\n  }\n\n}\n",
          "name" : "blog.service.ts",
          "order" : 1,
          "path" : "app/blog/services/"
        }, {
          "content" : "  // new method\n  updatePage(page: number) {\n    this.blogService.setPage(page);\n  }\n\n",
          "name" : "list.component.ts",
          "order" : 2,
          "path" : "app/blog/list/"
        }, {
          "content" : "<!-- append to the end -->\n<div class=\"container\">\n  <dr-pagination *ngIf=\"blogService.pages.length > 1\" \n    [page]=\"blogService.page\"\n    [pages]=\"blogService.pages\"\n    (pageChange)=\"updatePage($event)\">\n  </dr-pagination>\n</div>",
          "name" : "list.component.html",
          "order" : 3,
          "path" : " app/blog/list/"
        } ],
        "order" : 37,
        "text" : "We need to modify our BlogService and  BlogComponent.\n\nIn the service, we create three new private properties that will contain the number of blogs that we have, the current page and how many posts we display by page.  We implement a new *setPage* method to set the current page, and two public getters so read the current page, and an array of pages numbers *(we return an array to use straight away in the ngFor)*.\n\nThe *getBlogs* method will store the number of blogs, and we will slice the array to get the selected blogs.\n\nIn the BlogComponent, we will add our new component in the template, and we will add a new function in the component that will be called when the pagination component emits a changePage. It that case, we will set the page in the service, and when we apply next to the blogSubject, we will emit the values to the subscriber, our blogComponent, and it will update the list with the new values."
      }, {
        "order" : 38,
        "text" : "## Conclusion\n\nWe started with a very basic application that showed only titles, and we are finishing with a styled blog.\nWe have been using a few new component from angular (pipes, directives, output, eventEmitter, ...), adding styles thanks to @angular/material, integrating a few libraries (markdown, prettify, clipboard), and finally adding pagination.\n\nWe have a nice blog fetching data locally. In the following post, we will integrate the blog with external sources, adding authentication and storage with Firebase."
      } ],
      "title" : "Extending models and adding styles"
    },
    "-KW-U1bptyI7YgUnfd1D" : {
      "date_created" : "2017-02-05 01:01:05",
      "date_published" : "2017-03-09T03:00:00.000Z",
      "github" : "https://github.com/daniru/blog/tree/step_4",
      "header" : "Create your angular blog (4)",
      "key" : "create_angular_blog_4",
      "sections" : [ {
        "order" : 1,
        "text" : "This article is part of a series that takes you through the steps of creating your own blog using Angular and TypeScript. They will cover the core fundamentals of angular at the same time that we are building our data-driven application. We will be displaying the list of blog post and a post itself, we will be able to edit them using Reactive Forms, store them in a database (firebase) and navigate among those components. We will be hosting the blog in Github Pages.\n\nThis is the fourth part, we are going to connect our application to Firebase, to provide authentication and get live data. We will insert some comments with Disqus and we will finish adding Google Analytics to the website."
      }, {
        "order" : 2,
        "text" : "**[ Edited on 06 May 2017 ]** - Updated to use AngularFire2 4.0.0.rc-0 and firebase@3.9.0  {.alert .alert-warning}\n\nIf you get lost, you can check the code of the section [here](https://github.com/daniru/blog/tree/step_4). {.alert} "
      }, {
        "files" : [ {
          "content" : "npm install firebase angularfire2@4.0.0-rc.0 --save",
          "order" : 1
        } ],
        "order" : 3,
        "text" : "## Setup Firebase\n\nFirebase is a mobile and web platform that, among others features, will help us to manage authentication and store data in its real-time database\n\nTo set up Firebase, we visit the [firebase website](https://firebase.google.com/) and create an account or login into the platform. After that, we will go to the [console](https://console.firebase.google.com/) where we will create a new project.\n\nWe need to insert the name and after a  few seconds, we will have our project created. In the overview, we select the options **Add Firebase to your web app**, where you will have the configuration that we need to add in our application.\n\nIn our app, we will need to install two new libraries to connect,  Firebase and AngularFire2 are the official libraries for Firebase and Firebase for Angular2.\n"
      }, {
        "files" : [ {
          "content" : "// ... imports\nimport { AngularFireModule } from 'angularfire2';\nimport { environment } from '../environments/environment';\n\n@NgModule({\n  // ... metadata\n  imports: [\n    // imports\n    AngularFireModule.initializeApp(environment.firebaseConfig)\n  ]\n})\nexport class AppModule { }",
          "name" : "app.module.ts",
          "order" : 1,
          "path" : "app/"
        }, {
          "content" : "export const environment = {\n  production: false,\n  firebaseConfig: {\n    apiKey: 'apiKey',\n    authDomain: 'authDomain',\n    databaseURL: 'databaseURL',\n    projectId: 'projectid',\n    storageBucket: 'storageBucket',\n    messagingSenderId: 'messagingSenderId'\n  }\n};\n",
          "name" : "environment.ts",
          "order" : 2,
          "path" : "/environment/"
        }, {
          "content" : "export const environment = {\n  production: true,\n  firebaseConfig: {\n    apiKey: 'apiKey',\n    authDomain: 'authDomain',\n    databaseURL: 'databaseURL',\n    projectId: 'projectid',\n    storageBucket: 'storageBucket',\n    messagingSenderId: 'messagingSenderId'\n  }\n};\n",
          "name" : "environment.prod.ts",
          "order" : 3,
          "path" : "/environment/"
        } ],
        "order" : 4,
        "text" : "Once installed, we import AngularFireModule from angularfire2 in our app.module and import it adding the configuration provided on the website. Here is the code.\n"
      }, {
        "files" : [ {
          "content" : "ng g service services/auth\nng g interface models/user",
          "order" : 1
        } ],
        "order" : 5,
        "text" : "## Authentication\n\nNow, that we have setup our app to use Firebase, let's use it to add authentication to the site.\n\nIn the Firebase console, we go the authentication section and sign-in method, I am going to setup a few providers:\n\n- Google: We just need to edit it and enable it.\n- Github: To enabled it, we need to provide CliendID and ClientSecret. We can get it going to our [Github account Settings](https://github.com/settings/developers) and registering a new application. We fill the form and add the callback URL that Firebase gave us.\n- Twitter: Similar than Github, go to register your app [here](https://apps.twitter.com/) and create a new app. Fill the form and the callback URL.\n\nNow that we have everything setup, we need a service to handle it.\n\n## Authentication Service\n\nLet's create the service and the user interface."
      }, {
        "files" : [ {
          "content" : "import { Subscription } from 'rxjs/Subscription';\nimport { Observable, Subject } from 'rxjs/Rx';\nimport { User } from '../models/user';\nimport { Injectable } from '@angular/core';\nimport { AngularFireAuth } from 'angularfire2/auth';\nimport * as firebase from 'firebase/app';\nimport { environment } from '../../environments/environment';\n\n@Injectable()\nexport class AuthService {\n\n  private _adminIds: string[] = environment.adminIds || ['oITo9pyPViUfZDGqY9h8x2XSKLG3'];\n  public userSubject: Subject<User>;\n  public user: User;\n\n  constructor(public afAuth: AngularFireAuth) {\n    this.userSubject = new Subject<User>();\n    this._proccessAuthState(null);\n    this.afAuth.authState.subscribe((x) => this._proccessAuthState(x) );\n  }\n\n  login(provider: string): Observable<string> {\n    const fbProvider = this._getProvider(provider);\n    if (fbProvider !== null) {\n      return Observable.fromPromise(\n        <Promise<any>> this.afAuth.auth.signInWithPopup(fbProvider))\n      .map((x) => { return null; })\n      .catch((x: firebase.auth.Error) => {\n        return Observable.of(x.message);\n      });\n    } else {\n      return Observable.of('No provider');\n    }\n  }\n\n  logout() {\n     this.afAuth.auth.signOut();\n  }\n\n  private _getProvider(provider: string): firebase.auth.AuthProvider {\n    switch (provider) {\n      case 'github': return new firebase.auth.GithubAuthProvider();\n      case 'google': return new firebase.auth.GoogleAuthProvider();\n      case 'twitter': return new firebase.auth.TwitterAuthProvider();\n      default: return null;\n    }\n  }\n\n  private _proccessAuthState(authState: any): void {\n    if (authState !== null && authState.providerData != null && authState.providerData.length > 0) {\n      const providerData = authState.providerData[0];\n      this.user = {\n        isLogged: true,\n        isAdmin: this._adminIds.indexOf(authState.uid) >= 0,\n        name: providerData.displayName,\n        image: providerData.photoURL\n      };\n    } else {\n      this.user = { isLogged: false, isAdmin: false, name: null, image: null };\n    }\n    this.userSubject.next(this.user);\n  }\n\n}\n",
          "name" : "auth.service.ts",
          "order" : 1,
          "path" : "/app/services/"
        }, {
          "content" : "export interface User {\n  name: string;\n  isLogged: boolean;\n  isAdmin: boolean;\n  image: string;\n}\n",
          "name" : "user.ts",
          "order" : 2,
          "path" : "/app/services/models/"
        }, {
          "content" : "...\n  adminIds: ['oITo9pyPViUfZDGqY9h8x2XSKLG3']\n...\n",
          "name" : "environment.*.ts",
          "order" : 3,
          "path" : "/environment/"
        } ],
        "order" : 6,
        "text" : "The interface contains name, image, isLogged, isAdmin properties.\n\nIn the service, we declare two public properties, the user and reactive Subject to communicate with other components. \n\nIn the constructor, we inject AngularFire, *that is the service that allows us to talk with Firebase*, initialise the user, calling the method _proccessAuthService with null (to populate user with the defaults), and we subscribe to the **auth** observable to receive any modifications of the user status from firebase. Every time that we receive data, we will process it and populate the user object and calculate its properties.\n\nWe are creating a personal blog, so only me (or you) will be able to add/edit data. So I hard-coded my ID to the component. A much better approach will be store the keys in one database but it is up to you if you need it. {.alert .alert-info}\n\nThe service will have two public methods: \n\n - Logout: we call the AngularFire method, and we will receive the update in the Subscription.\n - Login: we will return an Observable from the promise that AngularFire returns us, we will map to null if everything is OK, if not, we will return a text with the error.\n\n\n"
      }, {
        "files" : [ {
          "content" : "// ... imports and configs\nimport { AuthService } from './services/auth.service';\nimport { AngularFireAuthModule } from 'angularfire2/auth';\n\n@NgModule({\n  ...\n  imports: [\n      ...,\n      AngularFireAuthModule\n  ],\n  providers: [AuthService],\n  ...\n})\nexport class AppModule { }\n",
          "name" : "app.module.ts",
          "order" : 1,
          "path" : "app/"
        } ],
        "order" : 7,
        "text" : "To be able to use the AngularFire Auth Module fire and our new Auth Service, we need to include them in our **app.module.ts**.\n\nWe import **AngularFireAuthModule** and provide **AuthService**.\n"
      }, {
        "files" : [ {
          "content" : "// ... imports\nimport { AuthService } from '../../../services/auth.service';\n\n// ... metadata\nexport class ListComponent implements OnInit, OnDestroy {\n\n  // ...\n  private _authSubscription: Subscription;\n\n  constructor(public blogService: BlogService, private _authService: AuthService) { }\n\n  ngOnInit() {\n    this._blogSubscription = this.blogService.getBlogs().subscribe(items => { this.list = items; });\n    this._authSubscription = this._authService.userSubject.subscribe((user) => { this.blogService.refresh(); });\n  }\n\n  ngOnDestroy() {\n    if (this._blogSubscription) { this._blogSubscription.unsubscribe(); }\n    if (this._authSubscription) { this._authSubscription.unsubscribe(); }\n  }\n\n // ... other methods\n}\n",
          "name" : "list.component.ts",
          "order" : 1,
          "path" : "app/blog/list/"
        }, {
          "content" : "  // new method\n  refresh() {\n    this._blogSubject.next(this._localCache);\n  }",
          "name" : "blog.service.ts",
          "order" : 2,
          "path" : "app/blog/services/"
        } ],
        "order" : 8,
        "text" : "To notify other parts of the applications when the user changes, we created the userSubject. Anytime that we update the auth state, we will execute next and send the new user. It will be broadcasted to all subscribers. Any component can subscribe to it to know when it changes, and react in consequence.\n\nWe are going to subscribe from the blog.component, to refresh our data anytime that a user login or logout, as they can act differently depends on the user permissions. We will need a new method in the BlogService to refresh the data from the cache.\n\n"
      }, {
        "files" : [ {
          "content" : "ng g component shared/components/auth\nng g component shared/components/authDialog",
          "order" : 1
        } ],
        "order" : 9,
        "text" : "Now, that we have the service in place, let's add the component to allow authenticate.\n\n## Auth Component\n\nWe need a component to allow the user to login or logout. Let's create a couple of component in the shared module, one for the control itself and another for a popup."
      }, {
        "files" : [ {
          "content" : "import { Component } from '@angular/core';\nimport { MdDialog } from '@angular/material';\n\nimport { AuthService } from '../../../services/auth.service';\nimport { AuthDialogComponent } from '../auth-dialog/auth-dialog.component';\n\n@Component({\n  selector: 'dr-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss']\n})\nexport class AuthComponent {\n\n  constructor(public authService: AuthService, private _dialog: MdDialog) {}\n\n  logout() {\n     this.authService.logout();\n  }\n\n  showPanel() {\n    const dialogRef = this._dialog.open(AuthDialogComponent);\n    dialogRef.afterClosed().subscribe(result => { });\n  }\n\n}\n",
          "name" : "auth.component.ts",
          "order" : 1,
          "path" : "app/shared/components/auth/"
        }, {
          "content" : "<button md-icon-button (click)=\"showPanel()\" *ngIf=\"!authService.user.isLogged\" mdTooltip=\"Login\">\n   <i class=\"fa fa-sign-in\" aria-hidden=\"true\"></i>\n</button>\n<button md-icon-button (click)=\"logout()\" *ngIf=\"authService.user.isLogged\" mdTooltip=\"Logout\">\n  <i class=\"fa fa-sign-out\" aria-hidden=\"true\"></i>\n</button>\n",
          "name" : "auth.component.html",
          "order" : 2,
          "path" : "app/shared/components/auth/"
        }, {
          "content" : "import { Component, OnInit } from '@angular/core';\nimport { MdDialogRef, MdSnackBar } from '@angular/material';\nimport { AuthService } from '../../../services/auth.service';\n\n@Component({\n  selector: 'dr-auth-dialog',\n  templateUrl: './auth-dialog.component.html',\n  styleUrls: ['./auth-dialog.component.scss']\n})\nexport class AuthDialogComponent {\n\n  constructor(public authService: AuthService, public dialogRef: MdDialogRef<AuthDialogComponent>, public snackBar: MdSnackBar) {}\n\n  login(provider: string) {\n    this.authService\n      .login(provider)\n      .subscribe((errorMessage: string) => {\n        if (errorMessage) {\n          const snackBarRef = this.snackBar.open(errorMessage, null, { duration: 3000 });\n          console.log('errorMessage', errorMessage, this.snackBar, snackBarRef);\n        } else {\n          this.dialogRef.close();\n        }\n      });\n  }\n}\n",
          "name" : "auth-dialog.component.ts",
          "order" : 3,
          "path" : "app/shared/components/auth-dialog/"
        }, {
          "content" : "<md-dialog-actions>\n  <button md-raised-button class=\"google\" (click)=\"login('google')\"><i class=\"fa fa-google\"></i>Google</button>\n  <button md-raised-button class=\"twitter\" (click)=\"login('twitter')\"><i class=\"fa fa-twitter\"></i>Twitter</button>\n  <button md-raised-button class=\"github\" (click)=\"login('github')\"><i class=\"fa fa-github\"></i>Github</button>\n</md-dialog-actions>\n\n",
          "name" : "auth-dialog.component.html",
          "order" : 4,
          "path" : "app/shared/components/auth-dialog/"
        }, {
          "content" : "md-dialog-actions {\n  flex-direction: column;\n  width: 300px;\n  button {\n    margin: 3px !important;\n    width: 100%;\n    \n    &.delete,\n    &.google {\n      background-color: #DD4B39;\n      color:white;\n    }\n    &.github {\n      background-color: #444444;\n      color: white;\n    }\n    &.twitter {\n      background-color: #1da1f2;\n      color: white;\n    }\n    i { padding: 0 10px;}\n    &.half { width: 40%; }\n  }\n}",
          "name" : "auth-dialog.component.scss",
          "order" : 5,
          "path" : "app/shared/components/auth-dialog/"
        } ],
        "order" : 10,
        "text" : "The auth component will be part of the header. It consists of two buttons that they will swap depending on the status of the user. \nThe logout button will call the authService to perform the action, and the login button will show us a panel with the list of providers.\n\nWe implement that panel in the authDialog component, that we display one button for each provider, each time the user clicks over one, we will try to perform the authentication, display an error in the snackBar if fails, or closing the panel if success."
      }, {
        "files" : [ {
          "content" : "// ohter imports\nimport { MdToolbarModule, MdSnackBarModule, MdDialogModule, MdTooltipModule, MdButtonModule } from '@angular/material';\n\n@NgModule({\n  // ... metadata\n  imports: [\n    // .. other imports\n    MdToolbarModule, MdSnackBarModule, MdDialogModule, MdTooltipModule, MdButtonModule\n  ],\n  entryComponents: [ AuthDialogComponent ]\n})\nexport class SharedModule { }\n",
          "name" : "shared.module.ts",
          "order" : 1,
          "path" : "app/shared/"
        }, {
          "content" : "// append to the end\nsnack-bar-container {\n  background: #DD4B39 !important;\n}",
          "name" : "_material.overwrites.scss",
          "order" : 2,
          "path" : "/styles/"
        } ],
        "order" : 11,
        "text" : "Notice that we are using a few new @angular/material components, we will need to import **MdSnackBarModule, MdDialogModule, MdTooltipModule and MdButtonModule** in our share Module, and add our **AuthDialogComponent** as an entry point of the module, to make the dialog works."
      }, {
        "files" : [ {
          "content" : "<md-toolbar color=\"primary\">\n  <div class=\"logo\" routerLink=\"/\">Daniru</div>\n  <span class=\"fill-remaining-space\"></span>\n  <dr-auth></dr-auth>\n</md-toolbar>\n",
          "name" : "header.component.html",
          "order" : 1,
          "path" : "app/shared/"
        } ],
        "order" : 12,
        "text" : "Finally, we add the new component in the header template just adding <dr-auth></dr-auth>."
      }, {
        "order" : 13,
        "text" : "\nNow we have working the authentication in localhost, but we will need to add our domain in the console Firebase if we want to use the authentication when we publish the website in Github. To do that, we just need to go to the Authentication section in our Firebase console, go the the sign-in method and add our domain in **OAuth redirect domains**. {.alert .alert-warning}"
      }, {
        "files" : [ {
          "content" : "// ... imports and configs\nimport { AngularFireDatabaseModule } from 'angularfire2/database';\n\n@NgModule({\n  ...\n  imports: [\n      ...,\n      AngularFireDatabaseModule\n  ],\n})\nexport class AppModule { }",
          "name" : "app.module.ts",
          "order" : 1,
          "path" : "app/"
        } ],
        "order" : 14,
        "text" : "## Firebase Database\n\nNow it is time to setup the Firebase Database. \nWe go to the database section in the  [Firebase console](https://console.firebase.google.com/), access to data tab, and we can import our sample data (the options is in the three vertical dots). Remember that we created our JSON file to have the same structure that Firebase, so we just import it.\n\nNow, we need to import the **AngularFireDatabaseModule** in our app.module."
      }, {
        "files" : [ {
          "content" : "ng g service blog/services/blogFirebase",
          "order" : 1
        } ],
        "order" : 15,
        "text" : "##  Blog Service using Firebase\n\nIt is time to create another BlogService that get the data from firebase implementing the same interface\n\n"
      }, {
        "files" : [ {
          "content" : "import { Injectable, OnInit } from '@angular/core';\nimport { Observable, Subject } from 'rxjs/Rx';\nimport { AngularFireDatabase } from 'angularfire2/database';\nimport * as moment from 'moment';\nimport * as _ from 'lodash';\nimport 'rxjs/Rx';\nimport { AuthService } from '../../services/auth.service';\nimport { Blog } from '../models/blog';\n\n@Injectable()\nexport class BlogFirebaseService {\n\n  public get page(): number {\n    return this._page;\n  }\n\n  public get pages(): number[] {\n    return Array(Math.ceil(this._count / this._blogsByPage)).fill(null).map((x, i) => i + 1);\n  }\n\n  private _count: number;\n  private _page: number;\n  private _blogsByPage: number;\n\n  private _localCache: Blog[] = [];\n  private _blogSubject: Subject<Blog[]>;\n\n\n  constructor(public afdb: AngularFireDatabase, public authService: AuthService) {\n    this._page = 1;\n    this._count = 0;\n    this._blogsByPage = 6;\n\n    this._blogSubject = new Subject<Blog[]>();\n    this.afdb.list('/blog')\n      .map((x: Blog[]) => { return x; })\n      .do((x) => { this._localCache = x; })\n      .do((x) => this._blogSubject.next(x))\n      .subscribe();\n  }\n\n  // method to get all blogs\n  getBlogs(): Observable<Blog[]> {\n    const localObservable = Observable.of(this._localCache);\n    return Observable.merge(localObservable, this._blogSubject.asObservable())\n      .map((blogs) => {\n        const partial = this.authService.user.isAdmin ? _.orderBy(blogs, (x) => x.date_created)\n          : _.orderBy(_.filter(blogs, (x) => x.date_published && moment(x.date_published).isSameOrBefore(moment.utc())),\n             (x) => x.date_published);\n        this._count = partial.length;\n        return partial.reverse().slice((this.page - 1) * this._blogsByPage, (this.page) * this._blogsByPage);\n      });\n  }\n\n  // method to get on blog by key\n  getBlog(key: string): Observable<Blog> {\n    const blog = this._localCache.filter(x => x.key === key);\n    const localObservable = Observable.of(blog);\n    return Observable.merge(localObservable, this._blogSubject.asObservable())\n      .map(res => { return res.find(x => x.key === key); });\n  }\n\n  refresh() {\n    this._blogSubject.next(this._localCache);\n  }\n\n  setPage(num: number) {\n    this._page = num;\n    this._blogSubject.next(this._localCache);\n  }\n\n}\n",
          "name" : "blog-firebase.service.ts",
          "order" : 1,
          "path" : "app/blog/services/"
        } ],
        "order" : 16,
        "text" : "The new service is very similar to the current blogService, let's list the points:\n\n- The pagination will be the same and the methods will be the same.\n- We will replace in the constructor the Http service by the AngularFire and authService. The first will allow us to communicate with the Firebase database, and the second help us to display different data depending on the user status.\n- We replace Http by our angular fire service to perform the query in the constructor.\n\nThe code is here:\n"
      }, {
        "files" : [ {
          "content" : "\n  // method to get on blog by key\n  getBlogFromFireBase(key: string): Observable<Blog> {\n    return this.afdb.list(`/blog`, {\n      query: {\n        orderByChild: 'key',\n        equalTo: key,\n        limitToFirst: 1\n      }})\n      .filter((x: Blog) => this.authService.user.isAdmin ? true :\n        (x.date_published !== null && moment(x.date_published).isSameOrBefore(moment.utc())))\n      .map(x => x ? x[0] : null);\n  }",
          "order" : 1
        } ],
        "order" : 17,
        "text" : "Angular Fire exposes two ways to retrieve data, via object or list. We request the data via **list**  as it allows us to sort or to filter the data. {.alert}\n\nNotice that the main difference is how to query the data. In our **getBlogs** method, we will return different data, depending who is logged. We display the published blogs, order descendant by the published date, to all the users but the admin that will see the blogs ordered by the date that they were created.\n\nMerging the cache and the subject here has a higher importance that in the previous blogService. In the JSON version, we were trying to avoid the problem in the case that a component subscribes before that the service reads the file. It was a slim possibility. \nNow we rely on external sources, so it is more likely to have that delay. But the best advantage is that we will also receive any update of the data from Firebase from other sources (other websites, DB changes, ...)\n\nIn the getBlog method, we take advantage that we already have the data loaded, so we will read from the cache, but we can read directly from the database. We can replace the current method for the following one, and it will be working the same way. In that implementation, we are querying the data, asking for 1 object where the child 'key' has the same value that the requested one. We will filter it depends on the permission, and map to an object instead of an array,"
      }, {
        "files" : [ {
          "content" : "// ... imports\nimport { BlogFirebaseService } from './services//blog-firebase.service';\n\n@NgModule({\n  // ... metatada\n  providers: [\n    { provide: BlogService, useClass: BlogFirebaseService }\n  ]\n})\nexport class BlogModule { }\n",
          "name" : "blog.module.ts",
          "order" : 1,
          "path" : "app/blog/"
        } ],
        "order" : 18,
        "text" : "\nNow that we have our new BlogServiceFirebase created, and we want to replace it all across the app. This can be annoying, but no worries, we don't need to change it in every single component that uses it. We are going to take advance of the Angular Dependency injection. We just need to go to our blog.module, and tell that use our new implementation of the BlogFirebaseService instead of the JSON version BlogService.\n\nWe do that specifying the new class in the providers as you can see in the example bellow:"
      }, {
        "order" : 19,
        "text" : "Now, we have our page running with the data served via Firebase!!"
      }, {
        "files" : [ {
          "content" : "{\n  \"rules\": {\n    \".read\": \"true\",\n    \".write\": \"auth.uid == 'oITo9pyPViUfZDGqY9h8x2XSKLG3'\",\n    \"blog\": {\n    \t\".indexOn\": [\"key\", \"date_published\", \"date_created\"]\n     }\n  }\n}",
          "order" : 1
        } ],
        "order" : 20,
        "text" : "## Firebase Rules\n\nWe will need to setup some rules to access our Firebase data. There is a lot of options, for read, write, validate, ... We are going to use the most basic just a allow everybody read and only myself (or yourself) write. I set up a few indexes to improve performance as well. You can read more about them [here](https://firebase.google.com/docs/database/security/).\n\nThis is the rules that we are using."
      }, {
        "files" : [ {
          "content" : "ng g c blog/components/itemComments",
          "order" : 1
        } ],
        "order" : 21,
        "text" : "## Comments from Disqus\n\nWe want that the user can provide feedback, so I decided to use a third party control called DISQUS to add comments to the post and have some analytics to the system.\n\nWe go to their webpage and sign up. In the admin section, we create a new site, adding the name, website, and category. After that we will be asked to choose a platform, we select the last one \"Universal Code Install instruction\". \n\nWe keep the information open and create a component to include them."
      }, {
        "files" : [ {
          "content" : "import { Component, OnInit, Inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\n\ndeclare var DISQUS: any;\n\n@Component({\n  selector: 'dr-item-comments',\n  templateUrl: './item-comments.component.html',\n  styleUrls: ['./item-comments.component.scss']\n})\nexport class ItemCommentsComponent implements OnInit {\n\n  constructor(@Inject(DOCUMENT) private document: any) { }\n\n  ngOnInit() {\n    const s = this.document.createElement('script');\n    s.src = '//daniru.disqus.com/embed.js';\n    s.setAttribute('data-timestamp', new Date().toString());\n    (this.document.head || this.document.body).appendChild(s);\n  }\n}\n",
          "name" : "item-comments.component.ts",
          "order" : 1,
          "path" : "app/blog/components/item-comments/"
        }, {
          "content" : "<div id=\"disqus_thread\"></div>\n",
          "name" : "item-comments.component.html",
          "order" : 2,
          "path" : "app/blog/components/item-comments/"
        } ],
        "order" : 22,
        "text" : "The component will create a script object with our Disqus source and data, and we will append it to the head or body.\nIn our template, we just need to add a div with id *disqus_thread*.\n\nYou need to replace '//daniru.disqus.com/embed.js' for the similar one in your instructions.\n\n"
      }, {
        "files" : [ {
          "content" : "<div class=\"container\" *ngIf=\"blog\">\n  <md-card>\n    <md-card-header>\n      <dr-item-header [blog]=\"blog\" [headerLink]=\"false\"></dr-item-header>\n    </md-card-header> \n    <md-card-content>\n        <dr-item-section *ngFor=\"let section of blog.sections\" [section]=\"section\"></dr-item-section>\n        <dr-item-comments></dr-item-comments>\n    </md-card-content>\n  </md-card>\n</div>",
          "name" : "item.component.html",
          "order" : 1,
          "path" : "/app/blog/item/"
        } ],
        "order" : 23,
        "text" : "We include the component in our blog.component template:"
      }, {
        "files" : [ {
          "content" : "  <script>\n    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\n    ga('create', 'UA-XXXXXXX-X', 'auto');\n  </script>",
          "name" : "index.html",
          "order" : 1,
          "path" : ""
        } ],
        "order" : 24,
        "text" : "## Google analytics\n\nAre you curious about who is coming to your site and from where? You can add google analytics to the website. You need to register in [analytics](https://analytics.google.com), and after agreeing a few agreements, you can sign up to it, fill the form, and get the tracking script or number.\n\nOnce we have it, we need to go our index.html and add the script at the bottom of the body."
      }, {
        "files" : [ {
          "content" : "import { Component } from '@angular/core';\nimport {Router, NavigationEnd} from '@angular/router';\ndeclare let ga: Function;\n\n@Component({\n  selector: 'dr-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  constructor(public router: Router) {\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        ga('set', 'page', event.urlAfterRedirects);\n        ga('send', 'pageview');\n      }\n    });\n  }\n}\n",
          "name" : "app.component.ts",
          "order" : 1,
          "path" : "app/"
        } ],
        "order" : 25,
        "text" : "We have miss one line from the config, be sure that we remove **  ga('send', 'pageview');**. {.alert .alert-warning}\n\nThis is due than angular is a SPA, and we will be only triggering google analytics the first time that we enter, not during the navigation.\nA quick hack is adding the manual call then each route is processed in our app.component. Let's do it."
      }, {
        "order" : 26,
        "text" : "We import the Route and the NavigationEnd. As soon as we detect an event from the router that we are in the final route, we manually trigger google analytics function to save the record."
      }, {
        "order" : 27,
        "text" : "## Conclusion\n\nWe have been able to connect our static website to the Firebase backend to provide authentication and live sync database. We added Disqus to add comments to the post and finally, we added Google Analytics to our page.\n\nThe blog is ready to publish, but how do we edit or write a new post? Find out in the next post. We will use Reactive Forms to create and edit a post.\n"
      } ],
      "title" : "Adding back-end support with Firebase"
    },
    "-Kbgi0jO1T6iJyA2c4H7" : {
      "date_created" : "2017-02-04 01:01:06",
      "date_published" : "2017-06-12T04:00:00.000Z",
      "github" : "https://github.com/daniru/blog/tree/step_5",
      "header" : "Create your angular blog (5)",
      "key" : "create_angular_blog_5",
      "sections" : [ {
        "order" : 1,
        "text" : "This article is part of a series that takes you through the steps of creating your own blog using Angular and TypeScript. They will cover the core fundamentals of angular at the same time that we are building our data-driven application. We will be displaying the list of blog post and a post itself, we will be able to edit them using Reactive Forms, store them in a database (firebase) and navigate among those components. We will be hosting the blog in Github Pages.\n\nThis is the fifth part, we are going to use Reactive Forms to add edit and add post functionality. We will modify our blogService Firebase to be able to save the modifications."
      }, {
        "order" : 2,
        "text" : "This is optional, but to be able to work quickly and not , I recommend to switch back to the JSON BlogService for the first section, so we are sure we don't modify or delete real data. {.alert .alert-warning}"
      }, {
        "files" : [ {
          "content" : "/* ...*/\nimport { AuthService } from '../../../services/auth.service';\n\n@Component({ ... })\nexport class ItemHeaderComponent implements OnChanges {\n\n   // ...\n  @Output() editMode = new EventEmitter();\n  @Output() delete = new EventEmitter();\n\n  constructor(@Inject(DOCUMENT) private document: any, public authService: AuthService) { ... } \n\n  onEditClick() {\n    this.editMode.emit();\n  }\n\n  onDeleteClick() {\n    this.delete.emit();\n  }\n\n // ....\n\n}\n",
          "name" : "item-header.component.ts",
          "order" : 1,
          "path" : "app/blog/component/item-header/"
        }, {
          "content" : "<!-- first thing inside md-card-tittle -->\n  <button md-icon-button [mdMenuTriggerFor]=\"menu\" class=\"menu\" *ngIf=\"!headerLink && authService.user.isAdmin\">\n    <md-icon>more_vert</md-icon>\n  </button>\n  <md-menu #menu=\"mdMenu\">\n    <button md-menu-item (click)=\"onEditClick()\">\n      <md-icon>mode_edit</md-icon>\n      <span>Edit</span>\n    </button>\n    <button md-menu-item (click)=\"onDeleteClick()\">\n      <md-icon>delete</md-icon>\n      <span>Delete</span>\n    </button>\n  </md-menu>",
          "name" : "item-header.component.html",
          "order" : 2,
          "path" : "app/blog/component/item-header/"
        }, {
          "content" : "/* ...*/\n\nmd-card-title {\n   /* ...*/\n\n  .menu {\n    position: absolute;\n    right: 10px;\n    top: 10px;\n  }\n}\n\n/* ...*/",
          "name" : "item-header.component.scss",
          "order" : 3,
          "path" : "app/blog/component/item-header/"
        } ],
        "order" : 3,
        "text" : "## Creating the edit flow\n\nBefore focus in the Reactive Forms and how to add or edit a blog, we want to set the functionality flow.\nWe want to be able to create, edit and delete blogs from the application.\n\nThe most logic place to display the delete and edit buttons is the item-header. The buttons will emit event to the parent item. We are going to place those buttons, using MdMenu from material, at the top of the card-title. "
      }, {
        "order" : 4,
        "text" : "We have two new @Output events in the component, that will emit event when the user click edit or delete options. We inject the AuthService in the constructor to be able to check permissions in the template.\n\nIn the template we have added a button in the top right corner, that will use the material menu to display the edit and delete options for the admin users. We use the AuthService to check if the user is administrator to display or not the menu.\n\nRemember to add **MdMenuModule** and **MdIconModule** to the blog Module. {.alert .alert-warning }"
      }, {
        "files" : [ {
          "content" : "import { AuthService } from '../../../services/auth.service';\n\n@Component({ .. })\nexport class HeaderComponent {\n\n  constructor(public authService: AuthService) { }\n\n}\n",
          "name" : "header.component.ts",
          "order" : 1,
          "path" : "app/shared/header/"
        }, {
          "content" : "<md-toolbar color=\"primary\">\n  <div class=\"logo\" routerLink=\"/\">Daniru</div>\n  <span class=\"fill-remaining-space\"></span>\n  <button md-icon-button routerLink=\"/new\" *ngIf=\"authService.user.isAdmin\" mdTooltip=\"Add Post\">\n    <i class=\"material-icons\">add</i>\n  </button>\n  <dr-auth></dr-auth>\n</md-toolbar>",
          "name" : "header.component.html",
          "order" : 2,
          "path" : "app/shared/header/"
        } ],
        "order" : 5,
        "text" : "Next step is add the option to create a new Blog. We will place it in the header, close to the login/logout buttons. This will be simple route to the route **new**. As we did in the itemHeader, we will need to inject the AuthService to check if the user is logged and he is Administrator."
      }, {
        "files" : [ {
          "content" : "// ... imports\nimport { AuthService } from '../../../services/auth.service';\n\n// ...metatada\nexport class ItemComponent implements OnInit, OnDestroy {\n\n  public blog: Blog;\n  public editMode: boolean;\n  private _blogSubscription: Subscription;\n\n  constructor(public route: ActivatedRoute, public blogService: BlogService, public authService: AuthService, public router: Router) { }\n\n  ngOnInit() {\n    this.route.params.forEach((params: Params) => {\n      const key = params['key'];\n      if (key === 'new') {\n        this.blog = null;\n        this.editMode = true;\n      } else {\n        this._blogSubscription = this.blogService.getBlog(key).subscribe(data => this.blog = data);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._blogSubscription) { this._blogSubscription.unsubscribe(); }\n  }\n\n    onEditClick() {\n    if (this.authService.user.isAdmin) {\n      this.editMode = true;\n    }\n  }\n\n  onSave() {\n    if (this.authService.user.isAdmin) {\n      if (this.blog) {\n        console.log('saving', this.blog.key);\n      } else {\n        console.log('creating new blog');\n        this.router.navigate(['/']);\n      }\n      this.editMode = false;\n    }\n  }\n\n  onDelete() {\n    if (this.authService.user.isAdmin) {\n      console.log('deleting', this.blog.key);\n    }\n  }\n}\n",
          "name" : "item.component.ts",
          "order" : 1,
          "path" : "app/blog/components/item/"
        }, {
          "content" : "<div class=\"container\" *ngIf=\"blog && !editMode\">\n  <md-card>\n    <md-card-header>\n      <dr-item-header [blog]=\"blog\" [headerLink]=\"false\" (editMode)=\"onEditClick()\" (delete)=\"onDelete()\"></dr-item-header>\n    </md-card-header> \n    <md-card-content>\n        <dr-item-section *ngFor=\"let section of blog.sections\" [section]=\"section\"></dr-item-section>\n        <dr-item-comments></dr-item-comments>\n    </md-card-content>\n  </md-card>\n</div><div class=\"container\" *ngIf=\"editMode\">\n  <button (click)=\"onSave($event)\" >Save</button>\n</div>",
          "name" : "item.component.html",
          "order" : 2,
          "path" : "app/blog/components/item/"
        } ],
        "order" : 6,
        "text" : "Let's go to close the loop. The rest of the logic will be in our item component.\n\nIn the template,\n\n- We listen for events **editMode** and **delete** from the item-header to call the onEditClick or onDelete \nfunctions respectively. \n- We create a button that will be only be displayed when we are in edit mode, to leave that mode.\n\nIn the component\n\n- We create the property *editMode*, to keep the status, and three functions:\n\n  - **onEditClick**: it will check if we are admin and change set the editMode to true,\n  - **onDelete**: it will console.log that we are deleting the blog if we are admins.\n  - **onSave**: that we will console log \"saving\" or \"creating\" depending of the action. If we save a new blog, we will navigate to the blog list.\n\n- To handle a new blog route, we will check if the key of the blog is **new**, is so, we will set the blog to null, and go to editMode straight away."
      }, {
        "files" : [ {
          "content" : "ng g c blog/components/editItem",
          "order" : 1
        } ],
        "order" : 7,
        "text" : "Now, we have all the flow ready, we can create a blog, navigate between view and edit view in the blog and delete one.\n\n## Edit Item Component\n\nWe need to replace the button in the item by a proper component that will contain the form. Let's start:\n"
      }, {
        "files" : [ {
          "content" : "import { Component, OnChanges, Input, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormArray } from '@angular/forms';\nimport * as moment from 'moment';\nimport { Blog } from '../../models/blog';\nimport { Section } from '../../models/section';\nimport { File } from '../../models/file';\n\n@Component({\n  selector: 'dr-edit-item',\n  templateUrl: './edit-item.component.html',\n  styleUrls: ['./edit-item.component.scss']\n})\nexport class EditItemComponent implements OnChanges {\n\n  @Input() blog: Blog;\n  @Output() save = new EventEmitter<Blog>();\n\n  public form: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) { }\n\n  ngOnChanges() {\n    this.form = null;\n    this._fillForm();\n  }\n\n  onSave(ev: any) {\n    ev.preventDefault();\n    this.save.emit(this.form.value);\n  }\n\n  private _fillForm() {\n    const blog = this.blog || { key: '', header: '', title: '', date_published: '', sections: [null] };\n    this.form = this.formBuilder.group({\n      key: blog.key,\n      header: blog.header,\n      title: blog.title,\n      date_published: blog.date_published ? moment(blog.date_published).format('YYYY-MM-DDTMM:ss') : null,\n      sections: this.formBuilder.array(this._fillSectionArray(blog.sections))\n    });\n  }\n\n  private _fillSectionArray(sections: Section[]): any[] {\n    const result: any[] = [];\n    (sections || [null]).forEach(element => { result.push(this._fillSection(element)); });\n    return result;\n  }\n\n  private _fillSection(data: Section) {\n    const order: number = data ? data.order : this.form && this.form.controls['sections'] ?\n      (<Section[]>(<FormArray>this.form.controls['sections']).getRawValue()).length + 1 : 1;\n\n    const section = {\n        order: order,\n        text: data ? data.text : '',\n        files: this.formBuilder.array(data && data.files && data.files.length > 0 ? this._fillFileArray(data.files) : [])\n      };\n    return this.formBuilder.group(section);\n  }\n\n  private _fillFileArray(files: File[]) {\n    const result: any[] = [];\n    (files || [null]).forEach(element => { result.push(this._fillFile(element)); });\n    return result;\n  }\n\n  private _fillFile(data: File) {\n    const order: number = data ? data.order : this.form && this.form.controls['files'] ?\n      (<File[]>(<FormArray>this.form.controls['files']).getRawValue()).length + 1 : 1;\n\n    const file: any = {\n      order: order,\n      name: data ? data.name : '',\n      content: data ? data.content : '',\n      path: data ? data.path : ''\n    };\n    return this.formBuilder.group(file);\n  }\n\n}\n",
          "name" : "edit-item.component.ts",
          "order" : 1,
          "path" : "app/blog/components/edit-item/"
        }, {
          "content" : "<div class=\"container\" *ngIf=\"form\">\n  <md-card class=\"row\">\n    <form [formGroup]=\"form\">\n      <md-input-container class=\"full-width\">\n        <input mdInput  placeholder=\"Key\" formControlName=\"key\" type=\"text\" required>\n      </md-input-container>\n      <md-input-container class=\"full-width\">\n        <input mdInput  placeholder=\"Header\" formControlName=\"header\" type=\"text\">\n      </md-input-container>\n      <md-input-container class=\"full-width\">\n        <input mdInput  placeholder=\"Title\" formControlName=\"title\" type=\"text\" required>\n      </md-input-container>\n      <md-input-container class=\"full-width\">\n        <input mdInput  placeholder=\"Publish\" formControlName=\"date_published\" type=\"datetime-local\">\n      </md-input-container>\n      <button md-raised-button color=\"primary\" (click)=\"onSave($event)\" [disabled]=\"!form.valid\">Save</button>\n    </form>\n  </md-card>\n</div>",
          "name" : "edit-item.component.html",
          "order" : 2,
          "path" : "app/blog/components/edit-item/"
        }, {
          "content" : "@import \"../../../../styles/_colors\";\n\n.container {\n  padding-top: 10px;\n}\n\n.section {\n  border-left: 3px solid $color200;\n  margin-bottom: 5px;\n  margin-top: 20px;\n}\n\n/deep/ {\n  input.ng-invalid {\n    color: $red !important;\n  }\n  input:-webkit-autofill {\n    color: inherit;\n    -webkit-box-shadow: 0 0 0px 1000px white inset;\n  }\n}\n\n",
          "name" : "edit-item.component.scss",
          "order" : 3,
          "path" : "app/blog/components/edit-item/"
        }, {
          "content" : "<!-- remove\n<div class=\"container\" *ngIf=\"editMode\">\n  <button (click)=\"onSave($event)\" >Save</button>\n</div>\n-->\n<dr-edit-item [blog]=\"blog\" *ngIf=\"editMode\" (save)=\"onSave($event)\"></dr-edit-item>",
          "name" : "item.component.html",
          "order" : 4,
          "path" : "app/blog/components/item/"
        } ],
        "order" : 8,
        "text" : "The component will communicate with the parent receiving a blog as an input, and emitting the new value of the form when saving.\n\nWe will injecting in the constructor a new angular member, the **FormBuilder**. It will help us to create the different parts of the form.\n\nYou can get read information about the FormBuilder [here](https://angular.io/docs/ts/latest/guide/reactive-forms.html#!#formbuilder) {.alert .alert-info}\n\nAs soon as the input change, we will create a new form with the value, this will be an empty form is the input is null, or we will initialising it with the input value.\n\nWe keep the same structure in the form that we have in the interfaces. In the _fillForm private methord, we will create that form group, that will contain a FormArray of Sections, and each of them will contain a formArray of Files.\n\nHere you can have a look to the code.\n\n\n\n"
      }, {
        "order" : 9,
        "text" : "In the template, we use some material Input to show the root properties of the blog to be able to edit them, and the save button.\n\nWe need to include more modules in the blog.module. **FormsModule**, **ReactiveFormsModule** from '@angular/forms', and **MdInputModule** from @angular/material. {.alert .alert-warning}"
      }, {
        "files" : [ {
          "content" : "ng g c blog/components/EditItemSection",
          "order" : 1
        } ],
        "order" : 10,
        "text" : "## Edit section Component.\n\nLet's do a similar thing with the section"
      }, {
        "files" : [ {
          "content" : "import { Component, ElementRef, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\n\n@Component({\n  selector: 'dr-edit-item-section',\n  templateUrl: './edit-item-section.component.html',\n  styleUrls: ['./edit-item-section.component.scss']\n})\nexport class EditItemSectionComponent {\n\n  @Input() form: FormGroup;\n  @Input() showSwap: boolean;\n  @Output() moveSwap = new EventEmitter();\n  @Output() deleteSection = new EventEmitter();\n  @Output() addSection = new EventEmitter();\n\n  public editText: boolean;\n\n  constructor(private _elementRef: ElementRef) {\n    this.editText = false;\n  }\n\n  onSwapSection() {\n    this.moveSwap.emit();\n  }\n\n  onDeleteSection() {\n    this.deleteSection.emit();\n  }\n\n  onAddSection() {\n    this.addSection.emit();\n  }\n\n  onTextClick(e: any, el: any) {\n    this.editText = true;\n    setTimeout((x) => {\n      this._elementRef.nativeElement.querySelector('textarea').focus();\n    }, 100);\n  }\n\n  onTextAreaFocusOut() {\n    this.editText = false;\n  }\n\n}\n\n",
          "name" : "edit-item-section.component.ts",
          "order" : 1,
          "path" : "app/blog/components/edit-item-section/"
        }, {
          "content" : "<div [formGroup]=\"form\" class=\"form\">\n  {{form.controls.order.value}}\n  <div class=\"flex\">\n    <div id=\"wrapper\" [innerHTML]=\"form.controls.text.value | markdown\" *ngIf=\"!editText\" (click)=\"onTextClick($event, focusable)\"></div>\n    <md-input-container class=\"full-size\" *ngIf=\"editText\">\n      <textarea mdInput md-textarea-autosize formControlName=\"text\" rows=10 (focusout)=\"onTextAreaFocusOut()\" class=\"full-size\"></textarea>\n    </md-input-container>\n  </div>\n</div>\n<md-toolbar>\n  <button md-icon-button class=\"swap\" *ngIf=\"showSwap\" (click)=\"onSwapSection()\" mdTooltip=\"Swap Sections\">\n    <md-icon>swap_vert</md-icon>\n  </button>\n  <span class=\"fill-remaining-space\"></span>\n  <button md-icon-button class=\"addsection\" (click)=\"onAddSection()\" mdTooltip=\"Add Section\">\n    <md-icon>add_circle_outline</md-icon>\n  </button>\n  <span class=\"fill-remaining-space\"></span>\n  <button md-icon-button class=\"delete\" (click)=\"onDeleteSection()\" mdTooltip=\"Delete Section\">\n    <md-icon color=\"red\">delete</md-icon>\n  </button>\n</md-toolbar>\n",
          "name" : "edit-item-section.component.html",
          "order" : 2,
          "path" : "app/blog/components/edit-item-section/"
        }, {
          "content" : "@import \"../../../../styles/colors\";\n\nmd-toolbar {\n  min-height: auto;\n  padding: 3px;\n  /deep/ md-toolbar-row { height: auto; }\n}\n\n.form {\n  padding: 10px 0 10px 10px;\n}\n\nbutton {\n  &.swap { color: $blue; }\n  &.delete { color: $red; }\n  &.addsection { color: $green; }\n}\n\n/deep/ {\n  blockquote,\n  .alert {\n    background: #eee;\n    border-left: 4px solid #999;\n    border-width: 0 0 0 5px;\n    color: #555;\n    margin: 0 0 10px 0;\n    padding: 15px;\n    &.alert-primary {   border-color: $blue;        background-color: lighten($blue, 40%); }\n    &.alert-success {   border-color: $green;       background-color: lighten($green, 40%); }\n    &.alert-info {      border-color: $gray-light;  background: $gray-lightest; }\n    &.alert-warning {   border-color: $orange;      background-color: lighten($orange, 30%);  }\n    &.alert-danger {    border-color: $red;         background-color: lighten($red, 30%); }\n    &.alert-inverse {   border-color: $gray-dark;   background-color: lighten($gray-dark, 40%); }\n    &.alert-secondary { border-color: $gray-light;  background: $gray-lightest; }\n  }\n\n  h2 {\n    border-bottom: 1px solid $colorA100;\n    font-size: 25px;\n    margin: 30px 0;\n    opacity: .7;\n    padding: 5px 0;\n  }\n\n  h3 {\n    font-size: 22px;\n    margin: 30px 0;\n    opacity: .6;\n    padding: 5px 0;\n  }\n\n  code {\n    background: #eee;\n    border: 1px solid #ccc;\n    display: block;\n    font-size: 12px;\n    padding: 10px;\n  }\n\n  table {\n    background: $table-background;\n    margin-bottom: 1rem;\n    max-width: 100%;\n    width: 100%;\n\n    th,\n    td {\n      border-bottom: 1px solid $table-border-color;\n      margin-bottom: 1rem;\n      padding: .74rem;\n      vertical-align: top;\n    }\n\n    thead th {\n      border-bottom: 2px solid $table-border-color;\n      vertical-align: bottom;\n    }\n\n    tbody + tbody {\n      border-top: 2px solid $table-border-color;\n    }\n  }\n}\n",
          "name" : "edit-item-section.component.scss",
          "order" : 3,
          "path" : "app/blog/components/edit-item-section/"
        } ],
        "order" : 11,
        "text" : "The component will have a form input and a few events, letting know the parent the action to execute. We want to be able to delete a section, swap the order of two section and add a new section below.\n\nAs we write the blog in markdown, we will like to read the transformed text, but edit the source text. One approach is showing the transformed text by default, and when you click over the text, it will be replaced by a textarea to be able to edit. As soon as you leave the textarea, it will be replaced by the text."
      }, {
        "files" : [ {
          "content" : "import { Component, OnChanges, Input, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormArray } from '@angular/forms';\nimport * as moment from 'moment';\nimport { Blog } from '../../models/blog';\nimport { Section } from '../../models/section';\nimport { File } from '../../models/file';\n\n@Component({\n  selector: 'dr-edit-item',\n  templateUrl: './edit-item.component.html',\n  styleUrls: ['./edit-item.component.scss']\n})\nexport class EditItemComponent implements OnChanges {\n\n  @Input() blog: Blog;\n  @Output() save = new EventEmitter<Blog>();\n\n  public form: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) { }\n\n  ngOnChanges() {\n    this.form = null;\n    this._fillForm();\n  }\n\n  onSave(ev: any) {\n    ev.preventDefault();\n    this.save.emit(this.form.value);\n  }\n\n  onDeleteSection(order: number) {\n    const control = <FormArray>this.form.controls['sections'];\n    const index = control.getRawValue().findIndex((x) => x.order === order);\n    control.removeAt(index);\n    const values = <Section[]>control.getRawValue();\n    values.forEach((x) => { if (x.order >= order) { x.order--; }});\n    control.patchValue(values);\n  }\n\n  onSwapSection(order: any) {\n    const control = <FormArray>this.form.controls['sections'];\n    const values = <Section[]>control.getRawValue();\n    const obj1 = values.find((x) => x.order === order);\n    const obj2 = values.find((x) => x.order === order + 1);\n    if (obj1 && obj2) {\n      obj1.order ++;\n      obj2.order --;\n      control.patchValue(values);\n    }\n  }\n\n  onAddSection(order: any) {\n    const control = <FormArray>this.form.controls['sections'];\n    const values = <Section[]>control.getRawValue();\n    values.forEach((x) => { if (x.order > order) { x.order++; }});\n    control.patchValue(values);\n    control.push(this._fillSection({ order: order + 1, text: null, files: null }));\n  }\n\n  private _fillForm() {\n    const blog = this.blog || { key: '', header: '', title: '', date_published: '', sections: [null] };\n    this.form = this.formBuilder.group({\n      key: blog.key,\n      header: blog.header,\n      title: blog.title,\n      date_published: blog.date_published ? moment(blog.date_published).format('YYYY-MM-DDTMM:ss') : null,\n      sections: this.formBuilder.array(this._fillSectionArray(blog.sections))\n    });\n  }\n\n  private _fillSectionArray(sections: Section[]): any[] {\n    const result: any[] = [];\n    (sections || [null]).forEach(element => { result.push(this._fillSection(element)); });\n    return result;\n  }\n\n  private _fillSection(data: Section) {\n    const order: number = data ? data.order : this.form && this.form.controls['sections'] ?\n      (<Section[]>(<FormArray>this.form.controls['sections']).getRawValue()).length + 1 : 1;\n\n    const section = {\n        order: order,\n        text: data ? data.text : '',\n        files: this.formBuilder.array(data && data.files && data.files.length > 0 ? this._fillFileArray(data.files) : [])\n      };\n    return this.formBuilder.group(section);\n  }\n\n  private _fillFileArray(files: File[]) {\n    const result: any[] = [];\n    (files || [null]).forEach(element => { result.push(this._fillFile(element)); });\n    return result;\n  }\n\n  private _fillFile(data: File) {\n    const order: number = data ? data.order : this.form && this.form.controls['files'] ?\n      (<File[]>(<FormArray>this.form.controls['files']).getRawValue()).length + 1 : 1;\n\n    const file: any = {\n      order: order,\n      name: data ? data.name : '',\n      content: data ? data.content : '',\n      path: data ? data.path : ''\n    };\n    return this.formBuilder.group(file);\n  }\n\n}\n\n",
          "name" : "edit-item.component.ts",
          "order" : 1,
          "path" : "app/blog/components/edit-item/"
        }, {
          "content" : "<div class=\"container\" *ngIf=\"form\">\n  <md-card class=\"row\">\n    <form [formGroup]=\"form\">\n\n      <md-input-container class=\"full-width\">\n        <input mdInput placeholder=\"Key\" formControlName=\"key\" type=\"text\">\n      </md-input-container>\n      <md-input-container class=\"full-width\">\n        <input mdInput placeholder=\"Header\" formControlName=\"header\" type=\"text\">\n      </md-input-container>\n      <md-input-container class=\"full-width\">\n        <input mdInput placeholder=\"Title\" formControlName=\"title\" type=\"text\">\n      </md-input-container>\n      <md-input-container class=\"full-width\">\n        <input mdInput placeholder=\"Publish\" formControlName=\"date_published\" type=\"datetime-local\">\n      </md-input-container>\n\n      <button md-raised-button color=\"primary\" (click)=\"onSave($event)\" [disabled]=\"!form.valid\">Save</button>\n      <div formArrayName=\"sections\">\n        <div *ngFor=\"let control of (form.controls['sections'].controls | orderByOrder); let i = index;\" class=\"section\">\n          <dr-edit-item-section\n            [form]=\"control\"\n            [showSwap]=\"form.controls['sections'].controls.length > (i + 1)\"\n            (moveSwap)=\"onSwapSection(control.value.order)\"\n            (deleteSection)=\"onDeleteSection(control.value.order)\"\n            (addSection)=\"onAddSection(control.value.order)\">\n          </dr-edit-item-section>\n        </div>\n      </div>\n    </form>\n  </md-card>\n</div>",
          "name" : "edit-item.component.html",
          "order" : 2,
          "path" : "app/blog/components/edit-item/"
        } ],
        "order" : 12,
        "text" : "we need another material component to be added in the blog.module MdToolbarModule {.alert .alert-warning }\n\nWe need to use it in the itemEdit component. That component will declare it in the template, and we will be listening for a few events.\n\n- "
      }, {
        "files" : [ {
          "content" : "ng g p shared/pipes/orderByOrder --export",
          "order" : 1
        } ],
        "order" : 13,
        "text" : "### Order by order pipe\n\nTo keep the order in the section, without need to reorder inside of the array, we create a pipe to do in it the ngFor. In that case is a no Pure pipe\n\n"
      }, {
        "files" : [ {
          "content" : "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'orderByOrder',\n  pure: false\n})\nexport class OrderByOrderPipe implements PipeTransform {\n\n  transform(value: any[]): any {\n    return value.sort((a, b) => { return a.value ? a.value.order - b.value.order : a.order - b.order; });\n  }\n}\n",
          "name" : "order-by-order.pipe.tes",
          "order" : 1,
          "path" : "app/blog/pipes/"
        } ],
        "order" : 14,
        "text" : "code here:"
      }, {
        "files" : [ {
          "content" : "ng g c blog/components/editItemFile",
          "order" : 1
        } ],
        "order" : 15,
        "text" : "## Edit file Component\n\nWe do a similar thing with the files \n"
      }, {
        "files" : [ {
          "content" : "import { Component, Input, ElementRef, EventEmitter, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n@Component({\n  selector: 'dr-edit-item-file',\n  templateUrl: './edit-item-file.component.html',\n  styleUrls: ['./edit-item-file.component.scss']\n})\nexport class EditItemFileComponent {\n  @Input() form: FormGroup;\n  @Input() showSwap: boolean;\n  @Output() moveSwap = new EventEmitter();\n  @Output() deleteFile = new EventEmitter();\n\n  public editFile: boolean;\n\n  constructor(private _elementRef: ElementRef) {\n    this.editFile = false;\n  }\n\n  onTextClick() {\n    this.editFile = true;\n  }\n\n  onFinishEdit() {\n    this.editFile = false;\n  }\n\n  onSwapFile() {\n    this.moveSwap.emit();\n  }\n\n  onDeleteFile() {\n    this.deleteFile.emit();\n  }\n\n}\n",
          "name" : "edit-item-file.component.ts",
          "order" : 1,
          "path" : "app/blog/components/edit-item-file/"
        }, {
          "content" : "<div [formGroup]=\"form\">\n\n  <section *ngIf=\"!editFile\">\n    <md-toolbar>\n      <label>{{form.value.path}}{{form.value.name}}</label>\n      <span class=\"fill-remaining-space\"></span>\n      <button md-icon-button class=\"swap\" mdTooltip=\"Swap Sections\" *ngIf=\"showSwap\" (click)=\"onSwapFile()\">\n        <md-icon>swap_vert</md-icon>\n      </button>\n      <button md-icon-button class=\"delete\"  mdTooltip=\"Delete Section\" (click)=\"onDeleteFile()\">\n        <md-icon color=\"red\">delete</md-icon>\n      </button>\n    </md-toolbar>\n    <pre class=\"prettyprint prettyprinted\" [innerHTML]=\"form.value.content | prettyfile:form.value.name\" (click)=\"onTextClick($event, focusable)\"></pre>\n  </section>\n\n  <div *ngIf=\"editFile\">\n    <md-toolbar>\n      <md-input-container class=\"full-width\">\n        <input mdInput placeholder=\"Path\" formControlName=\"path\" type=\"text\">\n      </md-input-container>\n      <md-input-container class=\"full-width\">\n        <input mdInput placeholder=\"Filename\" formControlName=\"name\" type=\"text\">\n      </md-input-container>\n      <span class=\"fill-remaining-space\"></span>\n      <button md-icon-button class=\"done\" mdTooltip=\"Finish Edit\" (click)=\"onFinishEdit()\">\n        <md-icon color=\"red\">done</md-icon>\n      </button>\n    </md-toolbar>\n    <md-input-container class=\"full-width\">\n      <textarea mdInput formControlName=\"content\" cols=\"100\" rows=\"10\"></textarea>\n    </md-input-container>\n  </div>\n\n</div>\n",
          "name" : "edit-item-file.component.html",
          "order" : 2,
          "path" : "app/blog/components/edit-item-file/"
        }, {
          "content" : "@import \"../../../../styles/_colors\";\n\n:host {\n  width: 100%;\n}\n\nlabel {\n  font-size: 15px;\n  padding: 7px 0 0 10px;\n}\n\ninput {\n  font-size: 14px;\n}\n\nmd-toolbar {\n  background: $color100;\n  color: white;\n  font-size: 14px;\n  min-height: auto;\n  padding: 3px;\n\n  /deep/ md-toolbar-row {\n    height: auto;\n  }\n}\n\npre {\n  margin-top: 0;\n  overflow: auto;\n}\n\n/deep/ {\n  button {\n    &.swap {\n      color: $blue;\n    }\n    &.delete {\n      color: $red;\n    }\n    &.addfile {\n      color: $purple;\n    }\n    &.addsection {\n      color: $green;\n    }\n  }\n}",
          "name" : "edit-item-file.component.scss",
          "order" : 3,
          "path" : "app/blog/components/edit-item-file/"
        } ],
        "order" : 16,
        "text" : "We are going to implement the component"
      }, {
        "files" : [ {
          "content" : "// ...\nimport { File } from '../../models/file';\n\n@Component({\n  selector: 'dr-edit-item-section',\n  templateUrl: './edit-item-section.component.html',\n  styleUrls: ['./edit-item-section.component.scss']\n})\nexport class EditItemSectionComponent {\n\n// ...\n  @Output() addFile = new EventEmitter();\n\n  // ...\n\n  onAddFile() {\n    this.addFile.emit();\n  }\n\n  onSwapFile(order: any) {\n    const control = <FormArray>this.form.controls['files'];\n    const values = <File[]>control.getRawValue();\n    const obj1 = values.find((x) => x.order === order);\n    const obj2 = values.find((x) => x.order === order + 1);\n    if (obj1 && obj2) {\n      obj1.order ++;\n      obj2.order --;\n      control.patchValue(values);\n    }\n  }\n\n  onDeleteFile(order: any) {\n    this._deleteFile(order);\n  }\n\n  private _deleteFile(order: any) {\n    const control = <FormArray>this.form.controls['files'];\n    const index = control.getRawValue().findIndex((x) => x.order === order);\n    control.removeAt(index);\n    const values = <File[]>control.getRawValue();\n    values.forEach((x) => { if (x.order >= order) { x.order--; }});\n    control.patchValue(values);\n  }\n}\n\n",
          "name" : "edit-item-section.component.ts",
          "order" : 1,
          "path" : "app/blog/components/edit-item-section/"
        }, {
          "content" : "<div [formGroup]=\"form\" class=\"form\">\n    <!-- ... -->\n  <section *ngIf=\"form.controls.files.value.length > 0\">\n    <div *ngFor=\"let control of (form.controls.files.controls | orderByOrder); let i = index;\" class=\"editfile\" >\n      <dr-edit-item-file \n        [form]=\"control\"\n        [showSwap]=\"form.controls.files.value.length > (i + 1)\"\n        (moveSwap)=\"onSwapFile(control.value.order)\"\n        (deleteFile)=\"onDeleteFile(control.value.order)\">\n      </dr-edit-item-file>\n    </div>\n  </section>\n</div>\n<md-toolbar>\n  <!-- ... -->\n  <button md-icon-button class=\"addfile\"  (click)=\"onAddFile()\" mdTooltip=\"Add File\">\n    <md-icon>note_add</md-icon>\n  </button>\n</md-toolbar>",
          "name" : "edit-item-section.component.html",
          "order" : 2,
          "path" : "app/blog/components/edit-item-section/"
        } ],
        "order" : 17,
        "text" : "They need to comunicate with the parent"
      }, {
        "files" : [ {
          "content" : "  onAddFile(order: any) {\n    const control = <FormArray>this.form.controls['sections'];\n    const index = control.getRawValue().findIndex((x) => x.order === order);\n    const section = <FormArray>(<FormGroup>control.at(index)).controls['files'];\n    const values = <File[]>section.getRawValue();\n    section.push(this._fillFile({ order: values.length + 1 , content: null, name: null, path: null }));\n  }\n  ",
          "name" : "edit-item.ts",
          "order" : 1,
          "path" : "app/blog/components/edit-section/"
        }, {
          "content" : "<dr-edit-item-section\n            [form]=\"control\"\n            [showSwap]=\"form.controls['sections'].controls.length > (i + 1)\"\n            (moveSwap)=\"onSwapSection(control.value.order)\"\n            (deleteSection)=\"onDeleteSection(control.value.order)\"\n            (addSection)=\"onAddSection(control.value.order)\"\n            (addFile)=\"onAddFile(control.value.order)\">\n          </dr-edit-item-section>",
          "name" : "edit-item.html",
          "order" : 2,
          "path" : "app/blog/components/edit-item-section/"
        } ],
        "order" : 18,
        "text" : "And with his parent"
      }, {
        "order" : 19,
        "text" : "remeber add MdToolBarModule"
      }, {
        "files" : [ {
          "content" : "          <dr-edit-item-section\n           <!... others -->\n            [hideDelete]=\"form.controls['sections'].controls.length <= 1\">\n          </dr-edit-item-section>",
          "name" : "edit-item.component.html",
          "order" : 1,
          "path" : "app/blog/components/edit-item/"
        }, {
          "content" : "  // add input\n  @Input() form: FormGroup;\n  ",
          "name" : "edit-item-section.component.ts",
          "order" : 2,
          "path" : "app/blog/components/edit-item-section/"
        }, {
          "content" : "<button md-icon-button class=\"delete\" *ngIf=\"!hideDelete\" (click)=\"onDeleteSection()\" mdTooltip=\"Delete Section\">\n    <md-icon color=\"red\">delete</md-icon>\n  </button>",
          "name" : "edit-item-section.component.html",
          "order" : 3,
          "path" : "app/blog/components/edit-item-section/"
        } ],
        "order" : 20,
        "text" : "### Delete dialog / not allowing delete last section / validation\n\nWe want to avoid to delete the last section, as there a no way to create a new section without one.\n\nlet's add some proteccion"
      }, {
        "files" : [ {
          "content" : "ng g c shared/components/preventDeleteDialog ",
          "order" : 1
        } ],
        "order" : 21,
        "text" : "next is adding a dialog to protect to an accidentally delete. we create it in our shared module"
      }, {
        "files" : [ {
          "content" : "import { Component, OnInit } from '@angular/core';\nimport { MdDialogRef } from '@angular/material';\n\n@Component({\n  selector: 'dr-prevent-delete-dialog',\n  templateUrl: './prevent-delete-dialog.component.html',\n  styleUrls: ['./prevent-delete-dialog.component.scss']\n})\nexport class PreventDeleteDialogComponent {\n\n  constructor(public dialogRef: MdDialogRef<PreventDeleteDialogComponent>) {}\n\n  delete(provider: string) {\n    this.dialogRef.close(true);\n  }\n}\n",
          "name" : "prevent-delete-dialog.component.ts",
          "order" : 1,
          "path" : "app/shared/components/prevent-delete-dialog/"
        }, {
          "content" : "<h1 md-dialog-title>Are you sure?</h1>\n<md-dialog-actions>\n    <button md-raised-button md-dialog-close class=\"half\">Close</button>\n    <button md-raised-button (click)=\"delete()\" class=\"delete half\">Delete</button>\n</md-dialog-actions>\n",
          "name" : "prevent-delete-dialog.component.html",
          "order" : 2,
          "path" : "app/shared/components/prevent-delete-dialog/"
        } ],
        "order" : 22,
        "text" : "the code is simple"
      }, {
        "files" : [ {
          "content" : "// ohter imports\nimport { MdDialog, MdSnackBar } from '@angular/material';\nimport { PreventDeleteDialogComponent } from '../../../shared/components/prevent-delete-dialog/prevent-delete-dialog.component';\n\n// metadata\nexport class ItemComponent implements OnInit, OnDestroy {\n\n  // replace\n  constructor(public route: ActivatedRoute, public router: Router, public blogService: BlogService, public authService: AuthService,\n      public dialog: MdDialog, public snackBar: MdSnackBar) {\n    this.editMode = false;\n  }\n\n  // replace\n  onDelete() {\n    if (this.authService.user.isAdmin){\n      const dialogRef = this.dialog.open(PreventDeleteDialogComponent);\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          const snackBarRef = this.snackBar.open('deleting', null, { duration: 3000 });\n          console.log('deleting', this.blog.key);\n        }\n      });\n    }\n  }",
          "name" : "item.component.ts",
          "order" : 1,
          "path" : "app/blog/components/item/"
        }, {
          "content" : "// ohter imports\nimport { MdDialog, MdSnackBar } from '@angular/material';\nimport { PreventDeleteDialogComponent } from '../../../shared/components/prevent-delete-dialog/prevent-delete-dialog.component';\n\n// metadata\nexport class EditItemSectionComponent {\n\n  // replace\n  constructor(private _elementRef: ElementRef, public dialog: MdDialog, public snackBar: MdSnackBar) {\n    this.editText = false;\n  }\n\n  // replace\n  onDeleteSection() {\n    const dialogRef = this.dialog.open(PreventDeleteDialogComponent);\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.deleteSection.emit();\n      }\n    });\n  }\n\n  // replace\n  onDeleteFile(order: any) {\n    const dialogRef = this.dialog.open(PreventDeleteDialogComponent);\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this._deleteFile(order);\n      }\n    });\n  }\n\n}",
          "name" : "edit-item-section.component.ts",
          "order" : 2,
          "path" : "app/blog/components/edit-item-section/"
        } ],
        "order" : 23,
        "text" : "we need to be sure tha we add the new component from angular/material MdDailogModule and MdSnakbarModule in both, SharedModule and BlogModule, as weel the SharedModule inside the BlogModule.\n\nAfter that we are ready to use the dialog, lets include it in the item and item-edit-section components."
      }, {
        "files" : [ {
          "content" : "import { BlogService } from '../services/blog.service';\nimport { Observable } from 'rxjs/Observable';\n\nexport class NoDuplicationKeyValidator {\n\n  static checkNoDuplication(_blogService: BlogService, currentKey: string): {[key: string]: any} {\n    return (control) => {\n      return new Observable((obs: any) => {\n        if (!control.valueChanges || control.value === currentKey) {\n          obs.next(null);\n          obs.complete();\n        } else {\n          control\n            .valueChanges\n            .debounceTime(300)\n            .flatMap(value => _blogService.getBlog(control.value))\n            .subscribe(\n              data => {\n                if (data) {\n                  obs.next({ ['duplicated']: true });\n                } else {\n                  obs.next(null);\n                }\n                obs.complete();\n              },\n              error => {\n                obs.next({ ['duplicated']: true });\n                obs.complete();\n              }\n          );\n        }\n      });\n    };\n  }\n}\n",
          "name" : "noduplication-key.validator.ts",
          "order" : 1,
          "path" : "app/blog/validators/"
        } ],
        "order" : 24,
        "text" : "## Validation\n\nwe want two fields required title and key. As key should be unique, we will check using the blogservice, if it already exists. Let's create first the validator"
      }, {
        "files" : [ {
          "content" : "// ... other imports\nimport { BlogService } from '../../services/blog.service';\nimport { NoDuplicationKeyValidator } from '../validators/noduplication-key.validator';\n\n// ... metadata\nexport class EditItemComponentimplements OnChanges {\n\n  //... inject blogService in the constructor\n  constructor(private formBuilder: FormBuilder, private blogService: BlogService) { }\n\n  //... replace method\n  private _fillForm() {\n    const blog = this.blog || { key: '', header: '', title: '', date_published: '', sections: [null] };\n    this.form = this.formBuilder.group({\n      key: [blog.key,  [Validators.required], [NoDuplicationKeyValidator.checkNoDuplication(this.blogService, blog.key) ] ],\n      header: blog.header,\n      title: [blog.title, [  Validators.required ]],\n      date_published: blog.date_published ? moment(blog.date_published).format('YYYY-MM-DDTMM:ss') : null,\n      sections: this.formBuilder.array(this._fillSectionArray(blog.sections))\n    });\n  }\n\n}\n\n\n",
          "name" : "edit-item.component.ts",
          "order" : 1,
          "path" : "app/blog/components/edit-item/"
        }, {
          "content" : "<!--.... -->\n      <md-input-container class=\"full-width\">\n        <input mdInput placeholder=\"Key\" formControlName=\"key\" type=\"text\" required>\n      </md-input-container>\n      <md-input-container class=\"full-width\">\n        <input mdInput placeholder=\"Header\" formControlName=\"header\" type=\"text\">\n      </md-input-container>\n      <md-input-container class=\"full-width\">\n        <input mdInput placeholder=\"Title\" formControlName=\"title\" type=\"text\" required>\n      </md-input-container>\n      <md-input-container class=\"full-width\">\n        <input mdInput placeholder=\"Publish\" formControlName=\"date_published\" type=\"datetime-local\">\n      </md-input-container>\n      <button md-raised-button color=\"primary\" (click)=\"onSave($event)\" [disabled]=\"!form.valid\">Save</button>\n<!--.... -->",
          "name" : "edit-item.component.html",
          "order" : 2,
          "path" : "app/blog/components/edit-item/"
        } ],
        "order" : 25,
        "text" : "we will add in the form the validators.\n"
      }, {
        "files" : [ {
          "content" : "\n  saveBlog(id: string, blog: Blog): Observable<string> {\n    const subject = new Subject<string>();\n    blog.date_published = blog.date_published ? moment(blog.date_published).toDate() : null;\n    if (id) {\n      this.af.database.list('/blog').update(id, blog)\n        .then(() => { subject.next(null); })\n        .catch((e: Error) => { subject.next(e.message); });\n    } else {\n      blog.date_created = moment.utc().toDate();\n      this.af.database.list('/blog').push(blog)\n        .then((x) => { subject.next(null); })\n        .catch((e: Error) => { subject.error(e.message); } );\n    }\n     return subject.asObservable();\n  }\n\n  deleteBlog(id: string): Observable<string> {\n    const subject = new Subject<string>();\n    this.af.database.list('/blog').remove(id)\n      .then(() => { subject.next(null); })\n      .catch((e: Error) => { subject.error(e.message); } );\n    return subject.asObservable();\n  }\n  ",
          "name" : "blog-firebase.service.ts",
          "order" : 1,
          "path" : "app/blog/services/"
        }, {
          "content" : "  saveBlog(id: string, blog: Blog): Observable<string> {\n    if (id) {\n      console.warn('blog updated', blog);\n      return Observable.of('blog updated. FAKE!');\n    } else {\n      console.warn('blog created', blog);\n      return Observable.of('blog created. FAKE!');\n    }\n  }\n\n  deleteBlog(id: string): Observable<string> {\n    console.warn('blog deleted', id);\n    return Observable.of('blog deleted FAKE');\n  }\n\n",
          "name" : "blog.service.ts",
          "order" : 2,
          "path" : "app/blog/services/"
        } ],
        "order" : 26,
        "text" : "## Update Blog Services\n\nFinally, let's go to update our services and the item component to call them"
      }, {
        "files" : [ {
          "content" : "  private _key: string;\n\n  ngOnInit() {\n    this.route.params.forEach((params: Params) => {\n      const key = params['key'];\n      if (key === 'new') {\n        this.blog = null;\n        this._key = null;\n        this.editMode = true;\n      } else {\n        this.blogService.getBlog(key).subscribe((data: any) => {\n          if (data) {\n            this.blog = data;\n            this._key = data.$key;\n          } else {\n            this.router.navigate(['/']);\n          }\n        });\n      }\n    });\n  }\n\n  onSave(blog: Blog) {\n    this.editMode = false;\n    this.blogService.saveBlog(this._key, blog).subscribe(\n      (m: string) => {\n        if (m) {\n          const snackBarRef = this.snackBar.open(m, null, { duration: 3000 });\n          this.router.navigate(['/', blog.key]);\n        }\n      },\n      (e: string) => {\n        const snackBarRef = this.snackBar.open(e, null, { duration: 3000 });\n      });\n  }\n\n  onDelete() {\n    if (this.authService.user.isAdmin){\n      const dialogRef = this.dialog.open(PreventDeleteDialogComponent);\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          this.blogService.deleteBlog(this._key).subscribe(\n          (m: string) => {\n            if (m) {\n              const snackBarRef = this.snackBar.open(m, null, { duration: 3000 });\n              this.router.navigate(['/']);\n            }\n          },\n          (e: string) => {\n            const snackBarRef = this.snackBar.open(e, null, { duration: 3000 });\n          }\n        );\n        }\n      });\n    }\n  }\n\n}\n",
          "name" : "item.component.ts",
          "order" : 1,
          "path" : "app/blog/components/"
        } ],
        "order" : 27,
        "text" : "and the component"
      }, {
        "order" : 28,
        "text" : "## Conclusion"
      } ],
      "title" : "Editing post with Reactive Forms"
    },
    "-KcokJoC3Jp5m7qvhncc" : {
      "date_created" : "2017-02-03 01:01:06",
      "date_published" : "2017-06-13T04:00:00.000Z",
      "github" : "https://github.com/daniru/blog/tree/step_6",
      "header" : "CREATE YOUR ANGULAR BLOG (6)",
      "key" : "create_angular_blog_6",
      "sections" : [ {
        "order" : 1,
        "text" : "This article is part of a series that takes you through the steps of creating your own blog using Angular and TypeScript. They will cover the core fundamentals of angular at the same time that we are building our data-driven application. We will be displaying the list of blog post and a post itself, we will be able to edit them using Reactive Forms, store them in a database (firebase) and navigate among those components. We will be hosting the blog in Github Pages.\n\nIn out last post, we are going to create a new module, in that case an about me section. Taking advange that we have two different module, we will set up our app to use Lazy Load modules. We will finish adding a few miscellaneous things, as goggle analytics."
      }, {
        "files" : [ {
          "content" : "ng g m about --routing\nng g c about/components/about",
          "order" : 1
        } ],
        "order" : 2,
        "text" : "## About Me \n\nLet's create another module, that will contains the about me information.\n"
      }, {
        "files" : [ {
          "content" : "  <button md-icon-button routerLink=\"/new\" *ngIf=\"authService.user.isAdmin\" mdTooltip=\"Add Post\">\n    <i class=\"material-icons\">add</i>\n  </button>\n",
          "name" : "header.component.html",
          "order" : 1,
          "path" : "app/shared/header/"
        }, {
          "content" : "// ... imports\nimport { BlogModule } from './blog/blog.module';\nimport { AboutModule } from './about/about.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n//  ...  other modules\n    AppRoutingModule,\n    AboutModule,\n    BlogModule,\n  ]\n})\nexport class AppModule { }\n",
          "name" : "app.module.ts",
          "order" : 2,
          "path" : "app/"
        } ],
        "order" : 3,
        "text" : "So, we have the module ready to go, we will add a button in the header.component template, and we need to import aour About.Module in the App.Module. \n\nWe need to import the about.module before that the blog.module, as the route to /about will be handled by the about route not the blog item route. {.alert .alert-danger}"
      }, {
        "order" : 4,
        "text" : "Now, we can navigate to the about section."
      }, {
        "files" : [ {
          "content" : "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MdCardModule } from '@angular/material';\n\nimport { AboutRoutingModule } from './about-routing.module';\nimport { AboutComponent } from './components/about/about.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AboutRoutingModule,\n    MdCardModule\n  ],\n  declarations: [AboutComponent]\n})\nexport class AboutModule { }\n",
          "name" : "about.module.ts",
          "order" : 1,
          "path" : "app/about/"
        }, {
          "content" : "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AboutComponent } from './components/about/about.component';\n\nconst routes: Routes = [  { path: 'about', component: AboutComponent } ];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: []\n})\nexport class AboutRoutingModule { }\n",
          "name" : "about-routing.module.ts",
          "order" : 2,
          "path" : "app/about/"
        }, {
          "content" : "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'dr-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.scss']\n})\nexport class AboutComponent implements OnInit {\n\n  public text: string;\n\n  constructor() {\n\n    this.text = `\nHi, it's Dani, a Software Engineer from Barcelona living in London.\n\nI have been working in Barcelona, Brussels and London for a few years designing and developing enterprise application for factories,\ngaming and betting companies.\n\nI have been exposed to many different technologies:\n\n|  | Technologies |\n|---|---|\n| Backend | .NET, C#, VB, WCF, ASP.NET, Webapi, MVC, Services, PHP ... |\n| FrontEnd | JS, Angular, Jquery, AngularJS, Backbones, Typescript, Coffescript, SCSS, CSS, HTML5, ... |\n| Database | SqlServer, Mysql, MongoDB, Firebase, Redis ... |\n| Others | RabbitMQ, WAMP, Signalr ... |\n| Tools | Visual Studio, Visual Studio Code, ... |\n| Methodologies | Agile, Scrum, ... |\n\nIn my latest projects, I have created a few live-data applications, getting data from different sources and displaying in \nan Angular application in real time. I have learnt a lot from the community, so I have decided to leave the confort zone and\nto return / share some  of the knowledge that I got from you.\n\n## Follow me on\n`;\n    }\n\n  ngOnInit() {\n  }\n\n}\n",
          "name" : "about.component.ts",
          "order" : 3,
          "path" : "app/about/components/about/"
        }, {
          "content" : "<div class=\"container\">\n  <md-card>\n    <md-card-header>\n      <md-card-title>Daniel Rubio</md-card-title>\n      <md-card-subtitle>Software Engineer</md-card-subtitle>\n    </md-card-header>\n    <img md-card-image src=\"assets/images/P1120583.JPG\">\n    <md-card-content>\n      <div [innerHTML]=\"text | markdown\"></div>\n    </md-card-content>\n  <md-card-actions>\n    <a md-raised-button color=\"accent\" href=\"https://twitter.com/DRubioU\">Twitter</a>\n    <a md-raised-button color=\"accent\" href=\"https://www.linkedin.com/in/daniel-rubio-34441a26/\">Linked in</a>\n    <a md-raised-button color=\"accent\" href=\"https://www.instagram.com/drubiou/?hl=en\">Instagram</a>\n  </md-card-actions>\n  </md-card>\n</div>\n",
          "name" : "about.component.html",
          "order" : 4,
          "path" : "app/about/components/about/"
        }, {
          "content" : "@import '../../../../styles/_colors';\n\n\nmd-card {\n  margin: 10px;\n}\n\n.container {\n  font-size: 18px;\n}\n\n /deep/ {\n    \n    blockquote,\n    .alert {\n      background: $gray-lightest;\n      border-left: 4px solid $gray-light;\n      border-width: 0 0 0 5px;\n      color: $gray-light;\n      margin: 10px 0 10px 0;\n      padding: 15px;\n      &.alert-primary {   border-color: $blue;        background-color: lighten($blue, 40%); }\n      &.alert-success {   border-color: $green;       background-color: lighten($green, 40%); }\n      &.alert-info {      border-color: $gray-light;  background: $gray-lightest; }\n      &.alert-warning {   border-color: $orange;      background-color: lighten($orange, 30%);  }\n      &.alert-danger {    border-color: $red;         background-color: lighten($red, 30%); }\n      &.alert-inverse {   border-color: $gray-dark;   background-color: lighten($gray-dark, 40%); }\n      &.alert-secondary { border-color: $gray-light;  background: $gray-lightest; }\n    }\n\n    h2 {\n      border-bottom: 1px solid $colorA100;\n      font-size: 25px;\n      margin: 30px 0;\n      opacity: .7;\n      padding: 5px 0;\n    }\n\n    h3 {\n      font-size: 22px;\n      margin: 30px 0;\n      opacity: .6;\n      padding: 5px 0;\n    }\n\n    code {\n      background: $white;\n      border: 1px solid $gray-lighter;\n      display: block;\n      font-size: 12px;\n      padding: 10px;\n    }\n\n    table {\n      background: $table-background;\n      margin-bottom: 1rem;\n      max-width: 100%;\n      width: 100%;\n\n      th,\n      td {\n        border-bottom: 1px solid $table-border-color;\n        margin-bottom: 1rem;\n        padding: .74rem;\n        vertical-align: top;\n      }\n\n      thead th {\n        border-bottom: 2px solid $table-border-color;\n        vertical-align: bottom;\n      }\n\n      tbody + tbody {\n        border-top: 2px solid $table-border-color;\n      }\n    }\n\n  }\n\n  md-card-content {\n    font-size: 16px;\n  }\n\n  md-card-actions {\n    padding: 0 20px 20px 20px;\n    &:last-child {\n      margin-bottom: 20px !important;\n    }\n  }",
          "name" : "about.component.scss",
          "order" : 5,
          "path" : "app/about/components/about/"
        } ],
        "order" : 5,
        "text" : "We create a very basic module, we just add MdCardModule import  in the about.module, add the default route in new new about-routing to the about.component, fill the template and the scss."
      }, {
        "files" : [ {
          "content" : "webpack: Compiling...\nHash: 46173b0a95abcecb15cf\nTime: 780ms\nchunk    {0} polyfills.bundle.js, polyfills.bundle.map (polyfills) 147 kB {4} [initial]\nchunk    {1} main.bundle.js, main.bundle.map (main) 98.1 kB {3} [initial]\nchunk    {2} styles.bundle.js, styles.bundle.map (styles) 72.9 kB {4} [initial]\nchunk    {3} vendor.bundle.js, vendor.bundle.map (vendor) 5.21 MB [initial]\nchunk    {4} inline.bundle.js, inline.bundle.map (inline) 0 bytes [entry]\nwebpack: Compiled successfully.",
          "order" : 1
        } ],
        "order" : 6,
        "text" : "\n## Lazy Load\n\nLazy Load is a way to be loading the module logic by demand. If one user goes straight away to the about section, he will only load that module, and as soon as he redirect to the blog section, he will load the second. Is a very good way to split the code and improve performance.\n\nIf you have a look to the **ng serve** windows, we can see something similar to this"
      }, {
        "files" : [ {
          "content" : "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: 'about', loadChildren: 'app/about/about.module#AboutModule' },\n  { path: '', loadChildren: 'app/blog/blog.module#BlogModule' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n  providers: []\n})\nexport class AppRoutingModule { }\n\n",
          "name" : "app-routing.module.ts",
          "order" : 1,
          "path" : "app/"
        }, {
          "content" : "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AboutComponent } from './about/about.component';\n\nconst routes: Routes = [\n  { path: '', component: AboutComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: []\n})\nexport class AboutRoutingModule { }\n",
          "name" : "about-routing.module.ts",
          "order" : 2,
          "path" : "app/about/"
        } ],
        "order" : 7,
        "text" : "All our modules are loaded together. Let's follow the next step to use lazy load:\n\n- We need to **remove the imports for the BlogModule and AboutModule** in the AppModule, as they won't be included in the main file that we will load by default.\n- We will add the lazy load routes in the app-routing, indicating the path and name on the module for each root.\n- Now the routes inside the modules should have one by default, we can remove 'about' in the about-route, and leave only ''"
      }, {
        "files" : [ {
          "content" : "Hash: 04ac51fd83d76df2cfad\nTime: 5598ms\nchunk    {0} polyfills.bundle.js, polyfills.bundle.map (polyfills) 147 kB {4} [initial]\nchunk    {1} main.bundle.js, main.bundle.map (main) 21.7 kB {3} [initial] [rendered]\nchunk    {2} styles.bundle.js, styles.bundle.map (styles) 72.9 kB {4} [initial]\nchunk    {3} vendor.bundle.js, vendor.bundle.map (vendor) 4.5 MB [initial] [rendered]\nchunk    {4} inline.bundle.js, inline.bundle.map (inline) 0 bytes [entry]\nchunk    {5} 5.chunk.js, 5.bundle.map 785 kB {1} {6} [rendered]\nchunk    {6} 6.chunk.js, 6.bundle.map 4.84 kB {1} {5} [rendered]\nwebpack: Compiled successfully.",
          "order" : 1
        } ],
        "order" : 8,
        "text" : "Now, we can see, how we have divided the code in tow new chunks,"
      }, {
        "order" : 9,
        "text" : "I recommend to go to the Network tab in Chrome Developer Tools and have a look how the chunks are loaded when navigate from one module to another for first time. {.alert .alert-success}"
      }, {
        "files" : [ {
          "content" : "import { Component } from '@angular/core';\nimport {Router, NavigationEnd} from '@angular/router';\n\ndeclare const ga: Function;\ndeclare const window: any;\n\n@Component({\n  selector: 'dr-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  constructor(public router: Router) {\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        ga('set', 'page', event.urlAfterRedirects);\n        ga('send', 'pageview');\n        window.scroll(0, 0);\n      }\n    });\n  }\n}\n",
          "order" : 1
        } ],
        "order" : 10,
        "text" : "## Go to the top\n\nSometimes, Angular applications doesn't scroll to the top after navigate, we can do that manually in the appComponent as well.\n"
      }, {
        "files" : [ {
          "content" : "ng g c blog/components/prevNext ",
          "order" : 1,
          "path" : ""
        } ],
        "order" : 11,
        "text" : "## section to navigate between related headers"
      }, {
        "files" : [ {
          "content" : "import { Component, Input, OnChanges } from '@angular/core';\nimport { BlogService } from '../../services/blog.service';\n\n@Component({\n  selector: 'dr-prev-next',\n  templateUrl: './prev-next.component.html',\n  styleUrls: ['./prev-next.component.scss']\n})\nexport class PrevNextComponent implements OnChanges {\n\n  @Input() key: string;\n\n  public nav: any;\n\n  constructor(private blogService: BlogService) { }\n\n  ngOnChanges() {\n    if (this.key) {\n      this.nav = this.blogService.getPrevAndNext(this.key);\n    }\n  }\n\n}\n",
          "name" : "prev-next.component.ts",
          "order" : 1,
          "path" : "app/blog/components/"
        }, {
          "content" : "<md-toolbar>\n  <div *ngIf=\"nav.prev\">\n     <a [routerLink]=\"['../', nav.prev.key]\">\n      <div>Prev</div>\n      <div>{{nav.prev.title}}</div>\n    </a>\n  </div>\n  <span class=\"fill-remaining-space\"></span>\n  <div *ngIf=\"nav.next\">\n    <a [routerLink]=\"['../', nav.next.key]\">\n      <div class=\"next\">Next</div>\n      <div class=\"next\">{{nav.next.title}}</div>\n    </a>\n  </div>\n</md-toolbar>",
          "name" : "prev-next.component.html",
          "order" : 2,
          "path" : "app/blog/components/"
        }, {
          "content" : ":host {\n    md-toolbar {\n        font-size: 14px;\n    }\n    .next {\n        text-align: right;\n    }\n}",
          "name" : "prev-next.component.scss",
          "order" : 3,
          "path" : "app/blog/components/"
        } ],
        "order" : 12
      }, {
        "files" : [ {
          "content" : "  getPrevAndNext(key: string) {\n    let prev: Blog = null;\n    let next: Blog = null;\n    const paths = key.split('_');\n    if (paths.length >= 1) {\n      const id: any = paths[paths.length - 1];\n      if (!isNaN(id)) {\n        const route = paths.slice(0, paths.length - 1).join('_');\n        prev = this._localCache.find((x) => x.key === `${route}_${(id * 1) - 1}`);\n        next = this._localCache.find((x) => x.key === `${route}_${(id * 1) + 1}`);\n      }\n    }\n    return { prev: prev, next: next};\n  }",
          "name" : "blog.service.*.ts",
          "order" : 1,
          "path" : "app/blog/service/"
        }, {
          "content" : "    <md-card-content>\n        <dr-item-section *ngFor=\"let section of blog.sections\" [section]=\"section\"></dr-item-section>\n        <dr-prev-next [key]=\"blog.key\"></dr-prev-next>\n        <dr-item-comments></dr-item-comments>\n    </md-card-content>",
          "name" : "item.component.ts",
          "order" : 2,
          "path" : "app/blog/components/item/"
        } ],
        "order" : 13
      } ],
      "title" : "Extras: About me section, Lazy Load, Google Analytics, ..."
    }
  },
  "post" : {
    "-KryUf79nj2XEG3GOp7k" : {
      "date_created" : "2017-08-20T08:01",
      "date_published" : "2017-08-19T08:00",
      "github" : "https://www.github.com/daniru/web",
      "header" : "First Header",
      "key" : "firstblog",
      "sections" : [ {
        "order" : 1,
        "text" : "After a while, I decided to create my own webpage where I want to publish some of the things that I do in my spare time and piece of code that I am find usefull to remember.\n\nThe site has been built with the last version of Angular. All the code of that site is available in public repositories in Github and publish in Github Pages.\n\n<a href=\"https://www.github.com/daniru/web\"></a>"
      } ],
      "title" : "Launching www.daniru.com website"
    },
    "-Ks-5tSMFHDmVfxHLwxP" : {
      "date_created" : "2017-08-20T08:00",
      "date_published" : "2017-08-19T08:00",
      "header" : "First Header 2",
      "key" : "second_key",
      "sections" : [ {
        "order" : 1,
        "text" : "First Section"
      } ],
      "title" : "First Title 22"
    },
    "-Ks-5wcbpIgNqZbLzb4q" : {
      "date_created" : "2017-08-20T08:13",
      "date_published" : "2017-08-19T08:00",
      "header" : "First Header 3",
      "key" : "third_key",
      "sections" : [ {
        "order" : 1,
        "text" : "First Section 223eqed "
      } ],
      "title" : "First Title 33"
    }
  },
  "snippet" : {
    "-KrCuLihEJ8skH_-cuu4" : {
      "category" : "Configuration",
      "code" : "<rewrite>\n  <rules>\n    <rule name=\"AngularJS\" stopProcessing=\"true\"><match url=\".*\" />\n      <conditions logicalGrouping=\"MatchAll\">\n        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n      </conditions>\n      <action type=\"Rewrite\" url=\"/\" />\n    </rule>\n  </rules>\n</rewrite>",
      "date_created" : "2017-08-10T08:13",
      "date_published" : "2017-08-10T08:13",
      "description" : "For angular running under IIS on Windows",
      "extension" : "html",
      "language" : "IIS",
      "title" : "IIS URL Rewrite Rule to prevent 404 error after page refresh in html5mode"
    },
    "-KrD07So2m0Jwjio_GAA" : {
      "category" : "aaa",
      "code" : "// generate module\nng g m moduleName --routing",
      "extension" : "bash",
      "language" : "Angular CLI",
      "title" : "Generate Components"
    },
    "-KrKXnHqvrg3xH94wy1S" : {
      "code" : "import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'preffix-selector-name',\n    templateUrl: 'name.component.html',\n    styleUrls: ['./name.component.scss']\n})\n\nexport class NameComponent implements OnInit {\n    \n    constructor() { }\n\n    ngOnInit() { }\n\n}",
      "date_created" : "2017-08-12T08:16",
      "language" : "Angular",
      "title" : "Component Template"
    },
    "-KrKYAdWkpiYQhsAqcIA" : {
      "code" : "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'selector-name'\n})\n\nexport class NamePipe implements PipeTransform {\n    \n    transform(value: any, ...args: any[]): any {\n        \n    }\n}",
      "date_created" : "2017-08-12T08:55",
      "extension" : "tx",
      "language" : "Angular",
      "title" : "Pipe Template"
    },
    "-KrK_p-916-VebeBhU4C" : {
      "code" : "\nabstract class ShapesClass\n{\n    abstract public int Area();\n}\n\nclass Square : ShapesClass\n{\n    int side = 0;\n\n    public Square(int n)\n    {\n        side = n;\n    }\n\n    // Area method is required to avoid a compile-time error.\n    public override int Area()\n    {\n        return side * side;\n    }\n\n}",
      "extension" : "cs",
      "language" : "C#",
      "title" : "Abstract Class"
    },
    "-KrSO3P-wwwkMzFudpnq" : {
      "code" : "DECLARE @numbers AS dbo.smallintlist \nINSERT INTO @numbers (value) VALUES (3),(4)\n\nEXEC dbo.GetEventsFromToNumbers '20170601', '20170630', @numbers",
      "language" : "SQL",
      "title" : "Small List as an Input in Store Procedure 2"
    },
    "-KsSRQTgtXTH45VucXNM" : {
      "code" : "git flow release start releasename\ngit flow release finish -n releasename",
      "language" : "Git",
      "title" : "Git Flow Release"
    },
    "-KvvK_Lg-1GZD8ZzFfuO" : {
      "code" : "BEGIN TRAN X\n\nDELETE FROM dbo.table WHERE id = 1\n\nROLLBACK TRAN X\n-- COMMIT TRAN X",
      "date_created" : "2017-10-08T10:50",
      "language" : "SQL",
      "title" : "Transanctions"
    },
    "-KvvMKAfJ9j3pgbwbQV2" : {
      "code" : "DECLARE @numbers AS dbo.smallintlist \nINSERT INTO @numbers (value) VALUES (3),(4)\n\nEXEC dbo.GetEventsFromToNumbers '20170601', '20170630', @numbers",
      "date_created" : "2017-10-08T10:28",
      "language" : "SQL",
      "title" : "Small List as an Input in Store Procedure"
    },
    "-KvvMP2TNs9KT_pjIQ_J" : {
      "code" : "DECLARE @numbers AS dbo.smallintlist \nINSERT INTO @numbers (value) VALUES (3),(4)\n\nEXEC dbo.GetEventsFromToNumbers '20170601', '20170630', @numbers",
      "date_created" : "2017-10-08T10:48",
      "language" : "SQL",
      "title" : "Small List as an Input in Store Procedure"
    }
  }
}
